import std::platform
import io
import memory

// TODO: let a, b = {1, 2}
// TODO: write(get_stdout_fd(), "Hello".ptr, 5)

func test_file_write() {
    let handle, err = open("file.txt", O_CREATE | O_WRITE, 0)
    write(handle, "HELLO_WORLD")
    close(handle)

    let newhandle, err = open("file.txt", O_READ, 0)
    defer close(newhandle)

    let bufdata = [12]uint8{}
    let data = []uint8{&bufdata[0], sizeof(bufdata)}
    read(newhandle, data)
    write(get_stdout_fd(), data)
    write(get_stdout_fd(), "\n")

    return true
}

extern(C) func test_main(): int {
    test_file_write()

    let handle, err = open("file.txt", O_READ, 0)
    let bufdata = [12]uint8{}
    let data = []uint8{&bufdata[0], sizeof(bufdata)}
    read(handle, data)
    write(get_stdout_fd(), data)
    write(get_stdout_fd(), "\n")
    close(handle)

    let str = "QWEQWEQWE"
    write(get_stdout_fd(), str)

    let m = alloc(str.len + 1)
    defer free(m)

    let ptr = nullcast(cast(*uint8)m.ptr)

    for (i in 0,str.len) {
        ptr[i] = str[i]
    }
    write(get_stdout_fd(), []pure uint8{ptr, str.len})

    return 0
}