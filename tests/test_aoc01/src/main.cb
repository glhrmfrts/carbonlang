import system as sys
import mem as mem
import io

func alloc_string(sz: usize): []uint8 {
    let data, err = mem::alloc(sz + 1)
    mem::memset(data, 0, sz + 1)
    return []uint8{ (cast(&uint8)data), sz }
}

func alloc_int_slice(n : usize) : {[]int, error} {
    let buf, err = mem::alloc(n * sizeof(int))
    if (err != noerr) { return []int{}, err } // TODO: return nil, err

    let slice = []int{ cast(&int)buf, n }
    return slice, noerr
}

func free(s) {
    mem::free(s.ptr)
}

func count_lines(s : []pure uint8) : usize {
    let count : usize
    for (i in 0,s.len) {
        if (s[i] == '\n') {
            count += 1
        }
    }
    return count
}

func is_numeric(c : uint8) : bool {
    return c >= '0' && c <= '9'
}

func trim_left_non_numeric(s: []pure uint8): []pure uint8 {
    let count : usize
    for (i in 0, s.len) {
        if (!is_numeric(s[i])) {
            count += 1
        }
        else {
            break
        }
    }
    return []pure uint8{ s.ptr + count, s.len - count }
}

func parse_int(s : []pure uint8, radix : int) : {int, []pure uint8, bool} {
    let value : int
    let count : usize

    for (i in 0,s.len) {
        if (is_numeric(s[i])) {
            value = value * radix + (s[i] - '0')
            count += 1
        }
        else {
            break
        }
    }

    return value, []pure uint8{ s.ptr + count, s.len - count }, count > 0
}

func main() {
    let stat : sys::Stat

    let err = sys::stat("aoc01.txt", &stat)
    if (err != noerr) {
        println("STAT ERROR")
        sys::exit(1)
    }

    let fd, err = sys::open("aoc01.txt", sys::READ, 0)
    if (err != noerr) {
        println("OPEN ERROR")
        sys::exit(1)
    }
    defer sys::close(fd)
    
    let input = alloc_string(stat.size)
    defer free(input)
    
    input.len = sys::read(fd, input)

    let buf = []pure uint8{ input.ptr, input.len }

    // TODO: investigate allocIntSlice(countLines(input)) crashes

    let numbers, err = alloc_int_slice(count_lines(buf))
    if (err != noerr) { sys::exit(1) }
    defer free(numbers)

    let sums, err = alloc_int_slice(count_lines(buf))
    if (err != noerr) { sys::exit(1) }
    defer free(sums)

    let numbercount = 0

    for (buf.len > 0) {
        buf = trim_left_non_numeric(buf)

        // TODO: Warning about variable shadowing
        let n, nbuf, ok = parse_int(buf, 10)
        buf = nbuf

        //print("end: ") println(end)
        if (ok) {
            //print("parsed number: ") println(n)
            numbers[numbercount] = n
            numbercount += 1
        }
        else {
            //println("failed to parse number")
            break
        }
    }

    let inccount = 0
    let suminccount = 0

    for (i in 1,numbercount) {
        if (numbers[i] > numbers[i - 1]) {
            inccount += 1
        }
    }

    for (i in 0,numbercount) {
        if (i < numbercount - 2) {
            sums[i] = numbers[i] + numbers[i + 1] + numbers[i + 2]
        }
    }

    for (i in 1,numbercount) {
        if (sums[i] > sums[i - 1]) {
            suminccount += 1
        }
    }

    print("increase count: ")
    print(inccount)
    println("")

    print("sum increase count: ")
    print(suminccount)
    println("")

}