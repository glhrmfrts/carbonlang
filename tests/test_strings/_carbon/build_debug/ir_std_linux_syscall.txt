func cb__Nstd__Nlinux__Nsyscall__Nread__Auint__Aptr__Tuint8__Ausize -> void
    arg #0 fd: uint;
    arg #1 ptr: ptr__Tuint8;
    arg #2 len: usize;
    ir_asm 
    mov $0, %rax            # system call 0 is read
                            # file handle is already in rdi
                            # data is already in rsi
                            # number of bytes is already in rdx
    syscall

;
endf

func cb__Nstd__Nlinux__Nsyscall__Nwrite__Auint__Aptr__Tpure__Tuint8__Ausize -> void
    arg #0 fd: uint;
    arg #1 ptr: ptr__Tpure__Tuint8;
    arg #2 len: usize;
    ir_asm 
    mov $1, %rax            # system call 1 is write
                            # file handle is already in rdi
                            # data is already in rsi
                            # number of bytes is already in rdx
    syscall

;
endf

func cb__Nstd__Nlinux__Nsyscall__Nopen__Aptr__Tpure__Tuint8__Aint__Aint16 -> int
    arg #0 filename: ptr__Tpure__Tuint8;
    arg #1 flags: int;
    arg #2 mode: int16;
    ir_asm     mov $2, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nclose__Auint -> void
    arg #0 fd: uint;
    ir_asm     mov $3, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nstat__Aptr__Tpure__Tuint8__Aptr__Topaque -> int
    arg #0 filename: ptr__Tpure__Tuint8;
    arg #1 buf: ptr__Topaque;
    ir_asm     mov $4, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nfstat__Aint__Aptr__Topaque -> int
    arg #0 fd: int;
    arg #1 buf: ptr__Topaque;
    ir_asm     mov $5, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nmmap__Aptr__Topaque__Ausize__Aint__Aint__Aint__Ausize -> ptr__Topaque
    arg #0 addr: ptr__Topaque;
    arg #1 size: usize;
    arg #2 prot: int;
    arg #3 flags: int;
    arg #4 fd: int;
    arg #5 offs: usize;
    ir_asm     mov $9, %rax
    mov %rcx, %r10
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nmunmap__Aptr__Topaque__Ausize -> void
    arg #0 addr: ptr__Topaque;
    arg #1 size: usize;
    ir_asm     mov $0xB, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nrename__Aptr__Tpure__Tuint8__Aptr__Tpure__Tuint8 -> void
    arg #0 oldname: ptr__Tpure__Tuint8;
    arg #1 newname: ptr__Tpure__Tuint8;
    ir_asm     mov $0x52, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nmkdir__Aptr__Tpure__Tuint8__Aint16 -> void
    arg #0 pathname: ptr__Tpure__Tuint8;
    arg #1 mode: int16;
    ir_asm     mov $0x53, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nrmdir__Aptr__Tpure__Tuint8 -> void
    arg #0 pathname: ptr__Tpure__Tuint8;
    ir_asm     mov $0x54, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nunlink__Aptr__Tpure__Tuint8 -> void
    arg #0 pathname: ptr__Tpure__Tuint8;
    ir_asm     mov $0x57, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nexit__Aint -> void
    arg #0 code: int;
    ir_asm     mov $60, %rax           # system call 60 is exit
                            # code is already in rdi
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nfork -> int
    ir_asm     mov $57, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nexecve__Aptr__Tpure__Tuint8__Aptr__Tptr__Tpure__Tuint8__Aptr__Tptr__Tpure__Tuint8 -> void
    arg #0 filename: ptr__Tpure__Tuint8;
    arg #1 argv: ptr__Tptr__Tpure__Tuint8;
    arg #2 envp: ptr__Tptr__Tpure__Tuint8;
    ir_asm     mov $59, %rax
    syscall
;
endf

func cb__Nstd__Nlinux__Nsyscall__Nwait4__Aint__Aptr__Tint__Aint__Aptr__Topaque -> void
    arg #0 pid: int;
    arg #1 stat_addr: ptr__Tint;
    arg #2 options: int;
    arg #3 ru: ptr__Topaque;
    ir_asm     mov $61, %rax
    mov %rcx,%r10
    syscall
;
endf

