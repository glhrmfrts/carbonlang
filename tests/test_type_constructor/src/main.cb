import std::io
import std::string
import std::rawstring
import std::alloc as alloc

type array(T) = struct {
    data: &T
    cap: usize
    len: usize
}

func make_array(`T, initial_capacity: usize) {
    var cap = initial_capacity
    if (cap == 0) {
        cap = 1
    }

    return array(T){
        cast(&T) alloc::alloc(sizeof(T)*cap),
        cap,
        0
    }
}

func append(a: &array, elem) {
    //if (a.len == a.cap) {
        //a.grow_capacity(a.cap*2)
    //}
    *a.nth(a.len) = elem
    a.len = a.len + 1
}

func nth(a: &array, i) {
    return &a.data[i]
}

func dispose(a: &array) {
    alloc::free(cast(pointer) a.data)
}

func main(args: []string) {
    println(args[0].data)

    let arr = make_array(`int, 10)
    defer arr.dispose

    let arr2 = make_array(`int, 10)
    defer arr2.dispose

    let ptr = nullpointer

    arr.append(1)
    arr.append(2)

    return cast(int) arr.len
}