string #0: "[OK] test_tuple_argument";
string #1: "[NOK] test_tuple_argument";
func cb__Nmain__Nsum_tuple__Aref__Ttuple__Tint__Tint__Tint -> int
    arg #0 t: ref__Ttuple__Tint__Tint__Tint;
    ir_deref A0;
    ir_deref A0;
    ir_add [ST . 0] [ST . 1];
    ir_deref A0;
    ir_add ST [ST . 2];
    ir_return ST;
endf

func cb__Nmain__Nmain__Aref__Tslice__TU_String -> int
    arg #0 args: ref__Tslice__TU_String;
    local #0 a: tuple__Tint__Tint__Tint;
    local #1 ares: int;
    local #2 $cbT0: tuple__Tint__Tint__Tint;
    ir_load [L0 . 0] 3;
    ir_load [L0 . 1] 4;
    ir_load [L0 . 2] 5;
    ir_copy L2 L0 12;
    ir_load_addr L2;
    ir_call cb__Nmain__Nsum_tuple__Aref__Ttuple__Tint__Tint__Tint ST;
    ir_load L1 ST;
    ir_add 3 4;
    ir_add ST 5;
    ir_jmp_neq L1 ST cb__Nmain__Nmain__Aref__Tslice__TU_String$if83$else;
    ir_make_label cb__Nmain__Nmain__Aref__Tslice__TU_String$if83$body;
    ir_load_addr STR0;
    ir_call cb__Nstd__Nio__Nprintln__Aptr__Tchar ST;
    ir_return 1;
    ir_jmp cb__Nmain__Nmain__Aref__Tslice__TU_String$if83$end;
    ir_make_label cb__Nmain__Nmain__Aref__Tslice__TU_String$if83$else;
    ir_load_addr STR1;
    ir_call cb__Nstd__Nio__Nprintln__Aptr__Tchar ST;
    ir_return 0;
    ir_make_label cb__Nmain__Nmain__Aref__Tslice__TU_String$if83$end;
endf

func cb__Ninit__Ninit_command_line__Aref__Tmut_slice__TU_String -> ref__Tmut_slice__TU_String
    arg #0 $cb_agg_ret: ref__Tmut_slice__TU_String;
    local #0 cmdline: ref__Tchar;
    local #1 data: ref__TU_String;
    local #2 result: mut_slice__TU_String;
    ir_call GetCommandLineA;
    ir_load L0 ST;
    ir_call cb__Nstd__Nalloc__Nalloc__Ausize 16;
    ir_load L1 ST;
    ir_load [L2 . 0] L1;
    ir_load [L2 . 1] 1;
    ir_deref [L2 . 0];
    ir_index ST 0;
    ir_load [ST . 0] L0;
    ir_deref [L2 . 0];
    ir_index ST 0;
    ir_call cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar L0;
    ir_load [ST . 1] ST;
    ir_deref A0;
    ir_copy ST L2 16;
    ir_return A0;
endf

func cb__Ninit__Nfree_command_line__Aref__Tmut_slice__TU_String -> void
    arg #0 args: ref__Tmut_slice__TU_String;
    ir_deref A0;
    ir_call cb__Nstd__Nalloc__Nfree__Araw_ptr [ST . 0];
endf

func carbon_main -> int
    local #0 args: mut_slice__TU_String;
    local #1 result: int;
    local #2 $cbT1: mut_slice__TU_String;
    local #3 $cbT2: mut_slice__TU_String;
    ir_load_addr L0;
    ir_call cb__Ninit__Ninit_command_line__Aref__Tmut_slice__TU_String ST;
    ir_copy L3 L0 16;
    ir_load_addr L3;
    ir_call cb__Nmain__Nmain__Aref__Tslice__TU_String ST;
    ir_load L1 ST;
    ir_copy L2 L0 16;
    ir_load_addr L2;
    ir_call cb__Ninit__Nfree_command_line__Aref__Tmut_slice__TU_String ST;
    ir_return L1;
endf

func cb__Nstd__Nalloc__Nalloc__Ausize -> raw_ptr
    arg #0 size: usize;
    ir_call GetProcessHeap;
    ir_call HeapAlloc ST 0 A0;
    ir_return ST;
endf

func cb__Nstd__Nalloc__Nfree__Araw_ptr -> void
    arg #0 ptr: raw_ptr;
    ir_call GetProcessHeap;
    ir_call HeapFree ST 0 A0;
endf

func cb__Nstd__Nalloc__Ncopy__Araw_ptr__Araw_ptr__Ausize -> void
    arg #0 dest: raw_ptr;
    arg #1 src: raw_ptr;
    arg #2 size: usize;
    ir_asm push rdi
push rsi

mov rdi,rcx
mov rsi,rdx
mov rcx,r8
rep movsb

pop rsi
pop rdi
    ;
endf

func cb__Nstd__Nalloc__Nset__Araw_ptr__Achar__Ausize -> void
    arg #0 dest: raw_ptr;
    arg #1 value: char;
    arg #2 count: usize;
    ir_asm push rdi

mov rdi,rcx
mov rax,rdx
mov rcx,r8
rep stosb

pop rdi
    ;
endf

func cb__Nstd__Nio__Nprintln__Aptr__Tchar -> void
    arg #0 c: ptr__Tchar;
    ir_call puts A0;
endf

func puts -> int
endf

func putc -> int
endf

func exit -> void
endf

func free -> int
endf

func malloc -> raw_ptr
endf

func rand -> int
endf

func system -> int
endf

func strlen -> usize
endf

func HeapAlloc -> raw_ptr
endf

func HeapFree -> bool
endf

func GetProcessHeap -> int
endf

func GetCommandLineA -> ref__Tchar
endf

func cb__Nstd__Nrawstring__Ncopy__Aptr__Tchar -> ptr__Tchar
    arg #0 str: ptr__Tchar;
    ir_call cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar A0;
    ir_call cb__Nstd__Nrawstring__Ncopy__Aptr__Tchar__Ausize A0 ST;
    ir_return ST;
endf

func cb__Nstd__Nrawstring__Ncopy__Aptr__Tchar__Ausize -> ptr__Tchar
    arg #0 str: ptr__Tchar;
    arg #1 size: usize;
    local #0 newstr: ptr__Tchar;
    ir_add A1 1;
    ir_call cb__Nstd__Nalloc__Nalloc__Ausize ST;
    ir_load L0 ST;
    ir_call cb__Nstd__Nrawstring__Ncopy__Aptr__Tchar__Aptr__Tchar__Ausize L0 A0 A1;
    ir_deref L0;
    ir_index ST A1;
    ir_load ST 0;
    ir_return L0;
endf

func cb__Nstd__Nrawstring__Ncopy__Aptr__Tchar__Aptr__Tchar__Ausize -> void
    arg #0 dest: ptr__Tchar;
    arg #1 src: ptr__Tchar;
    arg #2 size: usize;
    ir_call cb__Nstd__Nalloc__Ncopy__Araw_ptr__Araw_ptr__Ausize A0 A1 A2;
endf

func cb__Nstd__Nrawstring__Nset__Aptr__Tchar__Achar__Ausize -> void
    arg #0 dest: ptr__Tchar;
    arg #1 value: char;
    arg #2 count: usize;
    ir_call cb__Nstd__Nalloc__Nset__Araw_ptr__Achar__Ausize A0 A1 A2;
endf

func cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar -> usize
    arg #0 str: ptr__Tchar;
    local #0 c: usize;
    local #1 p: ptr__Tchar;
    ir_load L0 0;
    ir_load L1 A0;
    ir_make_label cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar$w641$cond;
    ir_deref L1;
    ir_cast ST;
    ir_jmp_eq ST 0 cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar$w641$end;
    ir_make_label cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar$w641$body;
    ir_add L1 1;
    ir_load L1 ST;
    ir_add L0 1;
    ir_load L0 ST;
    ir_jmp cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar$w641$cond;
    ir_make_label cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar$w641$end;
    ir_return L0;
endf

func cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar -> bool
    arg #0 a: ptr__Tchar;
    arg #1 b: ptr__Tchar;
    local #0 $foriter: tuple__Tint__Tusize;
    local #1 i: int;
    local #2 i: int;
    ir_call cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar A0;
    ir_call cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar A1;
    ir_jmp_eq ST ST cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$if673$else;
    ir_make_label cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$if673$body;
    ir_return 0;
    ir_make_label cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$if673$else;
    ir_load [L0 . 0] 0;
    ir_call cb__Nstd__Nrawstring__Nstrlen__Aptr__Tchar A0;
    ir_load [L0 . 1] ST;
    ir_load L2 [L0 . 0];
    ir_make_label cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$f697$cond;
    ir_cast L2;
    ir_jmp_gte ST [L0 . 1] cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$f697$end;
    ir_make_label cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$f697$body;
    ir_deref A0;
    ir_index ST L2;
    ir_deref A1;
    ir_index ST L2;
    ir_jmp_eq ST ST cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$if694$else;
    ir_make_label cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$if694$body;
    ir_return 0;
    ir_make_label cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$if694$else;
    ir_add L2 1;
    ir_load L2 ST;
    ir_jmp cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$f697$cond;
    ir_make_label cb__Nstd__Nrawstring__Nequals__Aptr__Tchar__Aptr__Tchar$f697$end;
    ir_return 1;
endf

func cb__Nstd__Ntests1__Nok -> void
endf

