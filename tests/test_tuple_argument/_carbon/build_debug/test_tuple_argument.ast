  code_unit{
    main.cb
    decl_list{
      import_decl{ std::io}
      import_decl{ std::string}
      import_decl{ std::rawstring}
      func_decl{sum_tuple (var_decl{t: type_expr{tuple_type{(type_expr{int}, type_expr{int}, type_expr{int})}}}): type_expr{int} {
          stmt_list{
            return{{{{* t}.0 + {* t}.1} + {* t}.2}}}}}
      func_decl{main (var_decl{args: type_expr{slice_type{[*] type_expr{String}}}}): type_expr{int} {
          decl_list{
            var_decl{a = init{
                {a.0 = 3}
                {a.1 = 4}
                {a.2 = 5}
                }}
            var_decl{ares = var_decl{$cbT0 = a}
call{sum_tuple ({& $cbT0})}}}
          stmt_list{
            if{{ares  {{3 + 4} + 5}} {
                stmt_list{
                  call{println ("[OK] test_tuple_argument")}
                  return{1}}} else {
                stmt_list{
                  call{println ("[NOK] test_tuple_argument")}
                  return{0}}}}}}}}}  code_unit{
    init.cb
    decl_list{
      import_decl{ std::io}
      import_decl{ std::string}
      import_decl{ std::rawstring}
      import_decl{ std::alloc alloc}
      import_decl{ std::os::windows}
      visibility_specifier{ private decl_list{
          func_decl{init_command_line (var_decl{$cb_agg_ret: }):  {
              decl_list{
                var_decl{cmdline = call{GetCommandLineA ()}}
                var_decl{data = cast_expr{type_expr{type_qualifier{reference, String}} call{alloc::alloc (16)}}}
                var_decl{result = init{type=type_expr{slice_type{[&] type_expr{String}}} 
                    {result.data = data}
                    {result.len = cast_expr{ 1}}
                    }}}
              stmt_list{
                {result.data[0] = init{type=type_expr{String} 
                  {result.data[0].data = cmdline}
                  {result.data[0].len = call{strlen (cmdline)}}
                  }}
                {{* $cb_agg_ret} = result}
                return{$cb_agg_ret}}}}
          func_decl{free_command_line (var_decl{args: type_expr{slice_type{[&] type_expr{String}}}}): type_expr{tuple_type{}} {
              stmt_list{
                call{alloc::free (cast_expr{type_expr{raw_ptr} {* args}.data})}}}}
          linkage_specifier{ extern(C) func_decl{carbon_main (): type_expr{int} {
                decl_list{
                  call{init_command_line ({& args})}
                  var_decl{args}}
                stmt_list{
                  defer{var_decl{$cbT1 = args}
call{free_command_line ({& $cbT1})}}}
                decl_list{
                  import_decl{ main}
                  var_decl{result = var_decl{$cbT2 = args}
call{main ({& $cbT2})}}}
                stmt_list{
                  return{result}}}}}}}}}  code_unit{
    std/alloc.cb
    decl_list{
      import_decl{ std::os::windows}
      func_decl{alloc (var_decl{size: type_expr{usize}}): type_expr{raw_ptr} {
          stmt_list{
            return{call{HeapAlloc (call{GetProcessHeap ()}, 0, size)}}}}}
      func_decl{free (var_decl{ptr: type_expr{raw_ptr}}): type_expr{tuple_type{}} {
          stmt_list{
            call{HeapFree (call{GetProcessHeap ()}, 0, ptr)}}}}
      func_decl{copy (var_decl{dest: type_expr{raw_ptr}}, var_decl{src: type_expr{raw_ptr}}, var_decl{size: type_expr{usize}}): type_expr{tuple_type{}} {
          decl_list{
            asm{push rdi
push rsi

mov rdi,rcx
mov rsi,rdx
mov rcx,r8
rep movsb

pop rsi
pop rdi
    }}}}
      func_decl{set (var_decl{dest: type_expr{raw_ptr}}, var_decl{value: type_expr{char}}, var_decl{count: type_expr{usize}}): type_expr{tuple_type{}} {
          decl_list{
            asm{push rdi

mov rdi,rcx
mov rax,rdx
mov rcx,r8
rep stosb

pop rdi
    }}}}}}  code_unit{
    std/configuration.cb
    decl_list{
      type_decl{ConfigurationGroup = type_expr{struct_type{(var_decl{name: type_expr{slice_type{[*] type_expr{char}}}})}}}
      type_decl{Configuration = type_expr{struct_type{(var_decl{first_group: type_expr{type_qualifier{reference, ConfigurationGroup}}})}}}}}  code_unit{
    std/io.cb
    decl_list{
      import_decl{ std::libc::stdio}
      func_decl{println (var_decl{c: type_expr{type_qualifier{pointer, char}}}): type_expr{tuple_type{}} {
          stmt_list{
            call{puts (c)}}}}}}  code_unit{
    std/libc/stdio.cb
    decl_list{
      linkage_specifier{ extern(C) decl_list{
          func_decl{puts (var_decl{c: type_expr{raw_string}}): type_expr{int} }
          func_decl{putc (var_decl{c: type_expr{char}}, var_decl{stream: type_expr{raw_ptr}}): type_expr{int} }}}}}  code_unit{
    std/libc/stdlib.cb
    decl_list{
      linkage_specifier{ extern(C) decl_list{
          func_decl{exit (var_decl{status: type_expr{int}}): type_expr{tuple_type{}} }
          func_decl{free (var_decl{ptr: type_expr{raw_ptr}}): type_expr{int} }
          func_decl{malloc (var_decl{size: type_expr{usize}}): type_expr{raw_ptr} }
          func_decl{rand (): type_expr{int} }
          func_decl{system (var_decl{c: type_expr{raw_string}}): type_expr{int} }}}}}  code_unit{
    std/libc/string.cb
    decl_list{
      linkage_specifier{ extern(C) decl_list{
          func_decl{strlen (var_decl{s: type_expr{raw_string}}): type_expr{usize} }}}}}  code_unit{
    std/os/windows.cb
    decl_list{
      linkage_specifier{ extern(C) decl_list{
          func_decl{HeapAlloc (var_decl{hHeap: type_expr{int}}, var_decl{dwFlags: type_expr{int}}, var_decl{dwBytes: type_expr{usize}}): type_expr{raw_ptr} }
          func_decl{HeapFree (var_decl{hHeap: type_expr{int}}, var_decl{dwFlags: type_expr{int}}, var_decl{lpMem: type_expr{raw_ptr}}): type_expr{bool} }
          func_decl{GetProcessHeap (): type_expr{int} }
          func_decl{GetCommandLineA (): type_expr{type_qualifier{reference, char}} }}}}}  code_unit{
    std/rawstring.cb
    decl_list{
      import_decl{ std::alloc alloc}
      func_decl{copy (var_decl{str: type_expr{type_qualifier{pointer, char}}}): type_expr{type_qualifier{pointer, char}} {
          stmt_list{
            return{call{copy (str, call{strlen (str)})}}}}}
      func_decl{copy (var_decl{str: type_expr{type_qualifier{pointer, char}}}, var_decl{size: type_expr{usize}}): type_expr{type_qualifier{pointer, char}} {
          decl_list{
            var_decl{newstr = cast_expr{type_expr{type_qualifier{pointer, char}} call{alloc::alloc ({size + 1})}}}}
          stmt_list{
            call{copy (newstr, str, size)}
            {newstr[size] = 0}
            return{newstr}}}}
      func_decl{copy (var_decl{dest: type_expr{type_qualifier{pointer, char}}}, var_decl{src: type_expr{type_qualifier{pointer, char}}}, var_decl{size: type_expr{usize}}): type_expr{tuple_type{}} {
          stmt_list{
            call{alloc::copy (cast_expr{type_expr{raw_ptr} dest}, cast_expr{type_expr{raw_ptr} src}, size)}}}}
      func_decl{set (var_decl{dest: type_expr{type_qualifier{pointer, char}}}, var_decl{value: type_expr{char}}, var_decl{count: type_expr{usize}}): type_expr{tuple_type{}} {
          stmt_list{
            call{alloc::set (cast_expr{type_expr{raw_ptr} dest}, value, count)}}}}
      func_decl{strlen (var_decl{str: type_expr{type_qualifier{pointer, char}}}): type_expr{usize} {
          decl_list{
            var_decl{c: type_expr{usize} = 0}
            var_decl{p = str}}
          stmt_list{
                          {cast_expr{ {* p}}  0}              {
                stmt_list{
                  {p = {p + 1}}
                  {c = {c + 1}}}}}
          stmt_list{
            return{c}}}}
      func_decl{equals (var_decl{a: type_expr{type_qualifier{pointer, char}}}, var_decl{b: type_expr{type_qualifier{pointer, char}}}): type_expr{bool} {
          stmt_list{
            if{{call{strlen (a)}  call{strlen (b)}} {
                stmt_list{
                  return{false}}}}}
          stmt_list{
                          (i)              {
                stmt_list{
                  if{{a[i]  b[i]} {
                      stmt_list{
                        return{false}}}}}}}
          stmt_list{
            return{true}}}}}}  code_unit{
    std/string.cb
    decl_list{
      type_decl{String = type_expr{slice_type{[*] type_expr{char}}}}
      type_decl{MutableString = type_expr{slice_type{[&] type_expr{char}}}}}}  code_unit{
    std/tests1.cb
    decl_list{
      func_decl{ok (): type_expr{tuple_type{}} {}}}}  code_unit{
    std/unicode.cb
    decl_list{
      import_decl{ std::alloc alloc}
      import_decl{ std::os::windows}
      type_decl{WideString = type_expr{slice_type{[*] type_expr{int16}}}}
      type_decl{MutableWideString = type_expr{slice_type{[&] type_expr{int16}}}}}}
