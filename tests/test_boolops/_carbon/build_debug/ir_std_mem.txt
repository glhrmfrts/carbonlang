func cb__Nstd__Nmem__Nalloc_in_block__Aptr__Tmemory_block__Ausize -> ptr__Topaque
    arg #0 pblock: ptr__Tmemory_block;
    arg #1 size: usize;
    local #0 blockdata: ptr__Tuint8;
    local #1 ptr: ptr__Tuint8;
    ir_add A0 32; (push)
    ir_load L0 POP();
    ir_deref A0; (push)
    ir_add L0 [POP() . 0]; (push)
    ir_load L1 POP();
    ir_deref A0; (push)
    ir_stack_dup; (push)
    ir_add [POP() . 0] A1; (push)
    ir_load [POP() . 0] POP();
    ir_deref A0; (push)
    ir_stack_dup; (push)
    ir_add [POP() . 2] 1; (push)
    ir_load [POP() . 2] POP();
    ir_return L1;
endf

func cb__Nstd__Nmem__Nalign__Ausize__Ausize -> usize
    arg #0 size: usize;
    arg #1 alignment: usize;
    ir_neg A0; (push)
    ir_sub A1 1; (push)
    ir_and POP() POP(); (push)
    ir_add A0 POP(); (push)
    ir_return POP();
endf

func cb__Nstd__Nmem__Nmemcopy__Aptr__Topaque__Aptr__Tpure__Topaque__Ausize -> void
    arg #0 dest: ptr__Topaque;
    arg #1 src: ptr__Tpure__Topaque;
    arg #2 size: usize;
    ir_asm     mov %rdx,%rcx
    rep movsb
;
endf

func cb__Nstd__Nmem__Nmemset__Aptr__Topaque__Auint8__Ausize -> void
    arg #0 dest: ptr__Topaque;
    arg #1 value: uint8;
    arg #2 count: usize;
    ir_asm     mov %rsi,%rax
    mov %rdx,%rcx
    rep stosb
;
endf

func cb__Nstd__Nmem__Nalloc__Aptr__Ttuple__Tptr__Topaque__Terror__Ausize -> ptr__Ttuple__Tptr__Topaque__Terror
    arg #0 $cb_agg_ret: ptr__Ttuple__Tptr__Topaque__Terror;
    arg #1 usersize: usize;
    local #0 pblock: ptr__Tmemory_block;
    local #1 newblock: ptr__Tmemory_block;
    local #2 asize: usize;
    local #3 memsize: usize;
    local #4 $cbT5: tuple__Tptr__Topaque__Terror;
    local #5 newmem: ptr__Topaque;
    local #6 err: error;
    local #7 $irtemp12: ptr__Ttuple__Tptr__Topaque__Terror;
    local #8 $irtemp13: ptr__Ttuple__Tptr__Topaque__Terror;
    local #9 $irtemp14: ptr__Ttuple__Tptr__Topaque__Terror;
    ir_call cb__Nstd__Nmem__Nalign__Ausize__Ausize A1 16; (push)
    ir_load L2 POP();
    ir_load L0 ;
    ir_make_label .w2832$cond;
    ir_jmp_eq L0 0 .w2832$end;
    ir_make_label .w2832$body;
    ir_deref L0; (push)
    ir_add [POP() . 0] L2; (push)
    ir_deref L0; (push)
    ir_jmp_gte POP() [POP() . 1] .if2823$else;
    ir_make_label .if2823$body;
    ir_jmp .w2832$end;
    ir_make_label .if2823$else;
    ir_deref L0; (push)
    ir_load L0 [POP() . 3];
    ir_jmp .w2832$cond;
    ir_make_label .w2832$end;
    ir_jmp_eq L0 0 .if2848$else;
    ir_make_label .if2848$body;
    ir_load L7 A0;
    ir_deref L7; (push)
    ir_call cb__Nstd__Nmem__Nalloc_in_block__Aptr__Tmemory_block__Ausize L0 L2; (push)
    ir_load [POP() . 0] POP();
    ir_deref L7; (push)
    ir_load [POP() . 1] 0;
    ir_return A0;
    ir_make_label .if2848$else;
    ir_add 32 L2; (push)
    ir_call cb__Nstd__Nmem__Nalign__Ausize__Ausize POP() 4096; (push)
    ir_load L3 POP();
    ir_load_addr L4; (push)
    ir_call cb__Nstd__Nsystem__Nalloc__Aptr__Ttuple__Tptr__Topaque__Terror__Ausize POP() L3;
    ir_load L5 [L4 . 0];
    ir_load L6 [L4 . 1];
    ir_jmp_eq L6 0 .if2882$else;
    ir_make_label .if2882$body;
    ir_load L8 A0;
    ir_deref L8; (push)
    ir_load [POP() . 0] 0;
    ir_deref L8; (push)
    ir_load [POP() . 1] L6;
    ir_return A0;
    ir_make_label .if2882$else;
    ir_call cb__Nstd__Nmem__Nmemset__Aptr__Topaque__Auint8__Ausize L5 0 32;
    ir_load L1 L5;
    ir_deref L1; (push)
    ir_load [POP() . 1] L3;
    ir_deref L1; (push)
    ir_load [POP() . 3] ;
    ir_load  L1;
    ir_load L9 A0;
    ir_deref L9; (push)
    ir_call cb__Nstd__Nmem__Nalloc_in_block__Aptr__Tmemory_block__Ausize L1 L2; (push)
    ir_load [POP() . 0] POP();
    ir_deref L9; (push)
    ir_load [POP() . 1] 0;
    ir_return A0;
endf

func cb__Nstd__Nmem__Nfree__Aptr__Topaque -> void
    arg #0 ptr: ptr__Topaque;
    local #0 pblock: ptr__Tmemory_block;
    local #1 prevblock: ptr__Tmemory_block;
    local #2 blockdata: ptr__Tuint8;
    ir_load L0 ;
    ir_store L1 0 0 8;
    ir_make_label .w2999$cond;
    ir_jmp_eq L0 0 .w2999$end;
    ir_make_label .w2999$body;
    ir_add L0 32; (push)
    ir_load L2 POP();
    ir_jmp_lt A0 L2 .if2986$else;
    ir_deref L0; (push)
    ir_add L2 [POP() . 1]; (push)
    ir_jmp_gte A0 POP() .if2986$else;
    ir_make_label .if2986$body;
    ir_jmp .w2999$end;
    ir_make_label .if2986$else;
    ir_load L1 L0;
    ir_deref L0; (push)
    ir_load L0 [POP() . 3];
    ir_jmp .w2999$cond;
    ir_make_label .w2999$end;
    ir_jmp_neq L0 0 .if3007$else;
    ir_make_label .if3007$body;
    ir_return #0;
    ir_make_label .if3007$else;
    ir_deref L0; (push)
    ir_stack_dup; (push)
    ir_sub [POP() . 2] 1; (push)
    ir_load [POP() . 2] POP();
    ir_deref L0; (push)
    ir_jmp_neq [POP() . 2] 0 .if3050$else;
    ir_make_label .if3050$body;
    ir_jmp_neq  L0 .if3039$else;
    ir_make_label .if3039$body;
    ir_deref L0; (push)
    ir_load  [POP() . 3];
    ir_jmp .if3039$end;
    ir_make_label .if3039$else;
    ir_deref L1; (push)
    ir_deref L0; (push)
    ir_load [POP() . 3] [POP() . 3];
    ir_make_label .if3039$end;
    ir_deref L0; (push)
    ir_call cb__Nstd__Nsystem__Nfree__Aptr__Topaque__Ausize L0 [POP() . 1];
    ir_make_label .if3050$else;
endf

func cb__Nstd__Nmem__Nalloc_slice__Cptr__Tpure__Tuint8__Aptr__Ttuple__Tslice__Tptr__Tpure__Tuint8__Terror__Ausize -> ptr__Ttuple__Tslice__Tptr__Tpure__Tuint8__Terror
    arg #0 $cb_agg_ret: ptr__Ttuple__Tslice__Tptr__Tpure__Tuint8__Terror;
    arg #1 size: usize;
    local #0 result: slice__Tptr__Tpure__Tuint8;
    local #1 $cbT6: tuple__Tptr__Topaque__Terror;
    local #2 buf: ptr__Topaque;
    local #3 err: error;
    local #4 $irtemp15: ptr__Ttuple__Tslice__Tptr__Tpure__Tuint8__Terror;
    local #5 $irtemp16: ptr__Ttuple__Tslice__Tptr__Tpure__Tuint8__Terror;
    ir_load_addr L1; (push)
    ir_mul A1 8; (push)
    ir_call cb__Nstd__Nmem__Nalloc__Aptr__Ttuple__Tptr__Topaque__Terror__Ausize POP() POP();
    ir_load L2 [L1 . 0];
    ir_load L3 [L1 . 1];
    ir_jmp_eq L3 0 .if4321$else;
    ir_make_label .if4321$body;
    ir_load L4 A0;
    ir_deref L4; (push)
    ir_store [POP() . 0] 0 0 16;
    ir_deref L4; (push)
    ir_load [POP() . 1] L3;
    ir_return A0;
    ir_make_label .if4321$else;
    ir_load [L0 . 0] L2;
    ir_load [L0 . 1] A1;
    ir_load L5 A0;
    ir_deref L5; (push)
    ir_load [POP() . 0] L0;
    ir_deref L5; (push)
    ir_load [POP() . 1] 0;
    ir_return A0;
endf

