string #0: "";
func cb__Nstd__Nstring__Nfrom_cstring__Aptr__Tslice__Tpure__Tuint8__Aptr__Tpure__Tuint8 -> ptr__Tslice__Tpure__Tuint8
    arg #0 $cb_agg_ret: ptr__Tslice__Tpure__Tuint8;
    arg #1 ptr: ptr__Tpure__Tuint8;
    local #0 result: slice__Tpure__Tuint8;
    ir_load [L0 . 0] A1;
    ir_load [L0 . 1] 0;
    ir_make_label .w3202$cond;
    ir_deref A1; (push)
    ir_cast POP(); (push)
    ir_jmp_eq POP() 0 .w3202$end;
    ir_make_label .w3202$body;
    ir_add A1 1; (push)
    ir_load A1 POP();
    ir_add [L0 . 1] 1; (push)
    ir_load [L0 . 1] POP();
    ir_jmp .w3202$cond;
    ir_make_label .w3202$end;
    ir_deref A0; (push)
    ir_copy POP() L0 16;
    ir_return A0;
endf

func cb__Nstd__Nstring__Nequals__Aptr__Tstring__Aptr__Tstring -> bool
    arg #0 a: ptr__Tstring;
    arg #1 b: ptr__Tstring;
    local #0 i: int;
    local #1 $foriter: tuple__Tint__Tusize;
    local #2 $irtemp25: int;
    ir_deref A0; (push)
    ir_deref A1; (push)
    ir_jmp_eq [POP() . 1] [POP() . 1] .if3246$else;
    ir_make_label .if3246$body;
    ir_return 0;
    ir_make_label .if3246$else;
    ir_load [L1 . 0] 0;
    ir_deref A0; (push)
    ir_load [L1 . 1] [POP() . 1];
    ir_load L0 [L1 . 0];
    ir_make_label .f3270$cond;
    ir_jmp_gte [L1 . 0] [L1 . 1] .f3270$neg;
    ir_load L2 1;
    ir_jmp_gte L0 [L1 . 1] .f3270$end;
    ir_jmp .f3270$body;
    ir_make_label .f3270$neg;
    ir_load L2 -1;
    ir_jmp_lte L0 [L1 . 1] .f3270$end;
    ir_make_label .f3270$body;
    ir_deref A0; (push)
    ir_deref [POP() . 0]; (push)
    ir_index POP() L0; (push)
    ir_deref A1; (push)
    ir_deref [POP() . 0]; (push)
    ir_index POP() L0; (push)
    ir_jmp_eq POP() POP() .if3267$else;
    ir_make_label .if3267$body;
    ir_return 0;
    ir_make_label .if3267$else;
    ir_add L0 L2; (push)
    ir_load L0 POP();
    ir_jmp .f3270$cond;
    ir_make_label .f3270$end;
    ir_return 1;
endf

func cb__Nstd__Nstring__Nfind__Aptr__Ttuple__Tusize__Tbool__Aptr__Tstring__Auint8 -> ptr__Ttuple__Tusize__Tbool
    arg #0 $cb_agg_ret: ptr__Ttuple__Tusize__Tbool;
    arg #1 haystack: ptr__Tstring;
    arg #2 needle: uint8;
    local #0 i: int;
    local #1 $foriter: tuple__Tint__Tusize;
    local #2 $irtemp26: int;
    local #3 $irtemp27: ptr__Ttuple__Tusize__Tbool;
    local #4 $irtemp28: ptr__Ttuple__Tusize__Tbool;
    ir_load [L1 . 0] 0;
    ir_deref A1; (push)
    ir_load [L1 . 1] [POP() . 1];
    ir_load L0 [L1 . 0];
    ir_make_label .f3324$cond;
    ir_jmp_gte [L1 . 0] [L1 . 1] .f3324$neg;
    ir_load L2 1;
    ir_jmp_gte L0 [L1 . 1] .f3324$end;
    ir_jmp .f3324$body;
    ir_make_label .f3324$neg;
    ir_load L2 -1;
    ir_jmp_lte L0 [L1 . 1] .f3324$end;
    ir_make_label .f3324$body;
    ir_deref A1; (push)
    ir_deref [POP() . 0]; (push)
    ir_index POP() L0; (push)
    ir_jmp_neq POP() A2 .if3321$else;
    ir_make_label .if3321$body;
    ir_load L3 A0;
    ir_deref L3; (push)
    ir_cast L0; (push)
    ir_load [POP() . 0] POP();
    ir_deref L3; (push)
    ir_load [POP() . 1] 1;
    ir_return A0;
    ir_make_label .if3321$else;
    ir_add L0 L2; (push)
    ir_load L0 POP();
    ir_jmp .f3324$cond;
    ir_make_label .f3324$end;
    ir_load L4 A0;
    ir_deref L4; (push)
    ir_load [POP() . 0] 0;
    ir_deref L4; (push)
    ir_load [POP() . 1] 0;
    ir_return A0;
endf

func cb__Nstd__Nstring__Nfind__Aptr__Ttuple__Tusize__Tbool__Aptr__Tstring__Aptr__Tstring -> ptr__Ttuple__Tusize__Tbool
    arg #0 $cb_agg_ret: ptr__Ttuple__Tusize__Tbool;
    arg #1 haystack: ptr__Tstring;
    arg #2 needle: ptr__Tstring;
    local #0 i: int;
    local #1 $foriter: tuple__Tint__Tusize;
    local #2 $cbT36: string;
    local #3 $cbT35: slice__Tpure__Tuint8;
    local #4 $irtemp29: int;
    local #5 $irtemp30: ptr__Ttuple__Tusize__Tbool;
    local #6 $irtemp31: ptr__Ttuple__Tusize__Tbool;
    ir_load [L1 . 0] 0;
    ir_deref A1; (push)
    ir_load [L1 . 1] [POP() . 1];
    ir_load L0 [L1 . 0];
    ir_make_label .f3400$cond;
    ir_jmp_gte [L1 . 0] [L1 . 1] .f3400$neg;
    ir_load L4 1;
    ir_jmp_gte L0 [L1 . 1] .f3400$end;
    ir_jmp .f3400$body;
    ir_make_label .f3400$neg;
    ir_load L4 -1;
    ir_jmp_lte L0 [L1 . 1] .f3400$end;
    ir_make_label .f3400$body;
    ir_deref A1; (push)
    ir_deref [POP() . 0]; (push)
    ir_index POP() L0; (push)
    ir_deref A2; (push)
    ir_deref [POP() . 0]; (push)
    ir_index POP() 0; (push)
    ir_jmp_neq POP() POP() .if3397$else;
    ir_cast L0; (push)
    ir_deref A2; (push)
    ir_add POP() [POP() . 1]; (push)
    ir_deref A1; (push)
    ir_jmp_gte POP() [POP() . 1] .if3397$else;
    ir_load_addr STR0; (push)
    ir_load [L3 . 0] POP();
    ir_load [L3 . 1] 0;
    ir_deref A2; (push)
    ir_copy L2 POP() 16;
    ir_load_addr L3; (push)
    ir_load_addr L2; (push)
    ir_call cb__Nstd__Nstring__Nequals__Aptr__Tstring__Aptr__Tstring POP() POP(); (push)
    ir_jmp_eq POP() 0 .if3397$else;
    ir_make_label .if3397$body;
    ir_load L5 A0;
    ir_deref L5; (push)
    ir_cast L0; (push)
    ir_load [POP() . 0] POP();
    ir_deref L5; (push)
    ir_load [POP() . 1] 1;
    ir_return A0;
    ir_make_label .if3397$else;
    ir_add L0 L4; (push)
    ir_load L0 POP();
    ir_jmp .f3400$cond;
    ir_make_label .f3400$end;
    ir_load L6 A0;
    ir_deref L6; (push)
    ir_load [POP() . 0] 0;
    ir_deref L6; (push)
    ir_load [POP() . 1] 0;
    ir_return A0;
endf

