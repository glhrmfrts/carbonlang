decl_list{
  type_decl{
    identifier{"Vector2"}
    =    struct_type{
            arg_list(
        var_decl{
          identifier{"x"}
          :          identifier{"float"}}
        var_decl{
          identifier{"y"}
          :          identifier{"float"}})}}
  func_decl{
    identifier{"add"}
    arg_list(
      var_decl{
        identifier{"a"}
        :        identifier{"Vector2"}}
      var_decl{
        identifier{"b"}
        :        identifier{"Vector2"}})
    :    identifier{"Vector2"}
    compound_stmt{
      stmt_list{
        return_stmt{
                    binary_expr{
            identifier{"a"}
            +
            identifier{"b"}}}}}}
  func_decl{
    identifier{"sub"}
    arg_list(
      var_decl{
        identifier{"a"}
        :        identifier{"Vector2"}}
      var_decl{
        identifier{"b"}
        :        identifier{"Vector2"}})
    :    identifier{"Vector2"}
    compound_stmt{
      stmt_list{
        return_stmt{
                    binary_expr{
            identifier{"a"}
            -
            identifier{"b"}}}}}}
  func_decl{
    identifier{"mul"}
    arg_list(
      var_decl{
        identifier{"a"}
        :        identifier{"Vector2"}}
      var_decl{
        identifier{"b"}
        :        identifier{"Vector2"}})
    compound_stmt{
      stmt_list{
        return_stmt{
                    binary_expr{
            identifier{"a"}
            *
            identifier{"b"}}}}}}
  func_decl{
    identifier{"main"}
    arg_list(
      var_decl{
        identifier{"argc"}
        :        identifier{"int"}}
      var_decl{
        identifier{"argv"}
        :        array_type{
          size=dynamic
          identifier{"raw_string"}}})
    :    identifier{"int"}
    compound_stmt{
      decl_list{
        var_decl{
          identifier{"vel"}
          :          identifier{"Vector2"}
          =          init_expr{
            arg_list(
              var_decl{
                identifier{"x"}
                =                int_literal{0}}
              var_decl{
                identifier{"y"}
                =                int_literal{0}})}}
        var_decl{
          identifier{"pos"}
          :          identifier{"Vector2"}
          =          init_expr{
            arg_list(
              int_literal{0}
              int_literal{0})}}
        var_decl{
          identifier{"state"}
          =          init_expr{
            type=            identifier{"State"}
            arg_list(
              var_decl{
                identifier{"position"}
                =                init_expr{
                  arg_list(
                    int_literal{0}
                    int_literal{0})}}
              var_decl{
                identifier{"velocity"}
                =                init_expr{
                  arg_list(
                    int_literal{0}
                    int_literal{0})}})}}
        var_decl{
          identifier{"arr"}
          =          init_expr{
            type=            array_type{
              size=              int_literal{2}
              identifier{"float"}}
            arg_list(
              float_literal{1}
              float_literal{0})}}}
      stmt_list{
        call_expr{
          identifier{"println"}
          arg_list(
            call_expr{
              identifier{"add"}
              arg_list(
                identifier{"pos"}
                identifier{"vel"})})}
        call_expr{
          identifier{"println"}
          arg_list(
            call_expr{
              identifier{"sub"}
              arg_list(
                identifier{"pos"}
                identifier{"vel"})})}
        call_expr{
          identifier{"println"}
          arg_list(
            call_expr{
              identifier{"mul"}
              arg_list(
                identifier{"pos"}
                identifier{"vel"})})}}
      decl_list{
        var_decl{
          identifier{"ok"}
          :          identifier{"bool"}}}
      stmt_list{
        return_stmt{
                    identifier{"ok"}}}}}}
