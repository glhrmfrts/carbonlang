decl_list{
  type_decl{
    identifier{"StrategyOne"}}
  type_decl{
    identifier{"StrategyTwo"}}
  type_decl{
    identifier{"Width"}
    =    type_expr{
            identifier{"int"}}}
  type_decl{
    identifier{"Vector2"}
    =    type_expr{
            tuple_type{
                arg_list(
          type_expr{
                        identifier{"float"}}
          type_expr{
                        identifier{"float"}})}}}
  type_decl{
    identifier{"Shader"}
    =    type_expr{
            struct_type{
                arg_list(
          var_decl{
            identifier{"id"}
            :            type_expr{
                            identifier{"int"}}}
          var_decl{
            identifier{"source"}
            :            type_expr{
                            identifier{"string"}}})}}}
  type_decl{
    identifier{"ShaderList"}
    =    type_expr{
            array_type{
        size=dynamic
        type_expr{
                    identifier{"Shader"}}}}}
  type_decl{
    identifier{"Storage"}
    =    type_expr{
            array_type{
        size=        int_literal{1024}
        type_expr{
                    identifier{"char"}}}}}
  type_decl{
    identifier{"Nested"}
    =    type_expr{
            struct_type{
                arg_list(
          var_decl{
            identifier{"filenames"}
            :            type_expr{
                            array_type{
                size=dynamic
                type_expr{
                                    identifier{"string"}}}}}
          var_decl{
            identifier{"info"}
            :            type_expr{
                            struct_type{
                                arg_list(
                  var_decl{
                    identifier{"name"}
                    :                    type_expr{
                                            identifier{"string"}}}
                  var_decl{
                    identifier{"age"}
                    :                    type_expr{
                                            identifier{"int"}}})}}})}}}
  type_decl{
    identifier{"NestedRef"}
    =    type_expr{
            type_qualifier{reference,
        identifier{"Nested"}}}}
  type_decl{
    identifier{"OptionalRefToNested"}
    =    type_expr{
            type_qualifier{optional,
        type_qualifier{reference,
          identifier{"Nested"}}}}}}
