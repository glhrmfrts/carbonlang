code_unit{
  std/rawstring.cb
  decl_list{
    import_decl{
      identifier{"std::libc::string"}}
    import_decl{
      identifier{"std::memory"}
      identifier{"mem"}}
    func_decl{
      identifier{"copy"}
      arg_list(
        var_decl{
          identifier{"str"}
          :type_expr{
            identifier{"raw_string"}}})
      :type_expr{
        identifier{"raw_string"}}
compound_stmt{
        stmt_list{
          return_stmt{
                        call_expr{
              identifier{"copy"}
              arg_list(
                identifier{"str"}
                call_expr{
                  identifier{"len"}
                  arg_list(
                    identifier{"str"})})}}}}}
    func_decl{
      identifier{"get_val"}
      arg_list()
      :type_expr{
        identifier{"int"}}
compound_stmt{
        stmt_list{
          return_stmt{
                        int_literal{0}}}}}
    func_decl{
      identifier{"copy"}
      arg_list(
        var_decl{
          identifier{"str"}
          :type_expr{
            identifier{"raw_string"}}}
        var_decl{
          identifier{"size"}
          :type_expr{
            identifier{"usize"}}})
      :type_expr{
        identifier{"raw_string"}}
compound_stmt{
        decl_list{
          var_decl{
            identifier{"newstr"}
            =}}
        stmt_list{
          call_expr{
            identifier{"copy"}
            arg_list(
              identifier{"newstr"}
              identifier{"str"}
              identifier{"size"})}
          binary_expr{
            index_expr{
              identifier{"newstr"}
              identifier{"size"}}
            =
            index_expr{
              identifier{"newstr"}
              binary_expr{
                int_literal{0}
                +
                binary_expr{
                  int_literal{1}
                  *
                  int_literal{2}}}}}
          return_stmt{
                        identifier{"newstr"}}}}}
    func_decl{
      identifier{"copy"}
      arg_list(
        var_decl{
          identifier{"dest"}
          :type_expr{
            identifier{"raw_string"}}}
        var_decl{
          identifier{"src"}
          :type_expr{
            identifier{"raw_string"}}}
        var_decl{
          identifier{"size"}
          :type_expr{
            identifier{"usize"}}})
compound_stmt{
        stmt_list{
          call_expr{
            identifier{"mem::copy"}
            arg_list(
              
              
              identifier{"size"})}}}}
    func_decl{
      identifier{"set"}
      arg_list(
        var_decl{
          identifier{"dest"}
          :type_expr{
            identifier{"raw_string"}}}
        var_decl{
          identifier{"value"}
          :type_expr{
            identifier{"char"}}}
        var_decl{
          identifier{"count"}
          :type_expr{
            identifier{"usize"}}})
compound_stmt{
        stmt_list{
          call_expr{
            identifier{"mem::set"}
            arg_list(
              
              identifier{"value"}
              identifier{"count"})}}}}
    func_decl{
      identifier{"len"}
      arg_list(
        var_decl{
          identifier{"str"}
          :type_expr{
            identifier{"raw_string"}}})
      :type_expr{
        identifier{"usize"}}
compound_stmt{
        stmt_list{
          return_stmt{
                        call_expr{
              identifier{"strlen"}
              arg_list(
                identifier{"str"})}}}}}}}
