code_unit{
  std/rawstring.cb
  decl_list{
    import_decl{
      identifier{"std::libc::string"}}
    import_decl{
      identifier{"std::memory"}
      identifier{"mem"}}
    func_decl{
      identifier{"copy"}
      arg_list(
        var_decl{
          identifier{"str"}
          :type_expr{
            identifier{"raw_string"}}})
      :type_expr{
        identifier{"raw_string"}}
compound_stmt{
        stmt_list{
          return_stmt{
                        call_expr{
              identifier{"copy"}
              arg_list(
                identifier{"str"}
                call_expr{
                  identifier{"len"}
                  arg_list(
                    identifier{"str"})})}}}}}
    func_decl{
      identifier{"copy"}
      arg_list(
        var_decl{
          identifier{"str"}
          :type_expr{
            identifier{"raw_string"}}}
        var_decl{
          identifier{"size"}
          :type_expr{
            identifier{"usize"}}})
      :type_expr{
        identifier{"raw_string"}}
compound_stmt{
        decl_list{
          var_decl{
            identifier{"newstr"}
            =}}
        stmt_list{
          call_expr{
            identifier{"copy"}
            arg_list(
              identifier{"newstr"}
              identifier{"str"}
              identifier{"size"})}
          binary_expr{
            index_expr{
              identifier{"newstr"}
              identifier{"size"}}
            =
            int_literal{0}}
          return_stmt{
                        identifier{"newstr"}}}}}
    func_decl{
      identifier{"copy"}
      arg_list(
        var_decl{
          identifier{"dest"}
          :type_expr{
            identifier{"raw_string"}}}
        var_decl{
          identifier{"src"}
          :type_expr{
            identifier{"raw_string"}}}
        var_decl{
          identifier{"size"}
          :type_expr{
            identifier{"usize"}}})
compound_stmt{
        stmt_list{
          call_expr{
            identifier{"mem::copy"}
            arg_list(
              
              
              identifier{"size"})}}}}
    func_decl{
      identifier{"set"}
      arg_list(
        var_decl{
          identifier{"dest"}
          :type_expr{
            identifier{"raw_string"}}}
        var_decl{
          identifier{"value"}
          :type_expr{
            identifier{"char"}}}
        var_decl{
          identifier{"count"}
          :type_expr{
            identifier{"usize"}}})
compound_stmt{
        stmt_list{
          call_expr{
            identifier{"mem::set"}
            arg_list(
              
              identifier{"value"}
              identifier{"count"})}}}}
    func_decl{
      identifier{"len"}
      arg_list(
        var_decl{
          identifier{"str"}
          :type_expr{
            identifier{"raw_string"}}})
      :type_expr{
        identifier{"usize"}}
compound_stmt{
        stmt_list{
          return_stmt{
                        call_expr{
              identifier{"strlen"}
              arg_list(
                identifier{"str"})}}}}}
    import_decl{
      identifier{"std::io"}}
    import_decl{
      identifier{"std::libc::stdio"}}
    func_decl{
      identifier{"print_the_char"}
      arg_list(
        var_decl{
          identifier{"v"}
          :type_expr{
            identifier{"char"}}}
        var_decl{
          identifier{"d"}
          :type_expr{
            identifier{"char"}}})
compound_stmt{
        stmt_list{
          call_expr{
            identifier{"puts"}
            arg_list(
              unary_expr{
                &
                identifier{"v"}})}}}}
    func_decl{
      identifier{"main"}
      arg_list()
      :type_expr{
        identifier{"int"}}
compound_stmt{
        decl_list{
          var_decl{
            identifier{"text"}
            =string_literal{"hello world"}}
          var_decl{
            identifier{"newtext"}
            =call_expr{
              identifier{"copy"}
              arg_list(
                identifier{"text"})}}}
        stmt_list{
          binary_expr{
            unary_expr{
              *
              identifier{"newtext"}}
            =
            int_literal{42}}
          binary_expr{
            index_expr{
              identifier{"newtext"}
              int_literal{6}}
            =
            int_literal{42}}
          call_expr{
            identifier{"println"}
            arg_list(
              identifier{"text"})}
          call_expr{
            identifier{"println"}
            arg_list(
              identifier{"newtext"})}
          call_expr{
            identifier{"print_the_char"}
            arg_list(
              
              int_literal{0})}
          return_stmt{
                        int_literal{0}}}}}}}
