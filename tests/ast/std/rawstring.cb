code_unit{
  std/rawstring.cb
  decl_list{
    import_decl{
      identifier{"std::memory"}
      identifier{"mem"}}
    func_decl{
      identifier{"copy"}
      arg_list(
        var_decl{
          identifier{"str"}
          :type_expr{
            type_qualifier{pointer,
              identifier{"char"}}}})
      :type_expr{
        type_qualifier{pointer,
          identifier{"char"}}}
compound_stmt{
        stmt_list{
          return_stmt{
                        call_expr{
              identifier{"copy"}
              arg_list(
                identifier{"str"}
                )}}}}}
    func_decl{
      identifier{"copy"}
      arg_list(
        var_decl{
          identifier{"str"}
          :type_expr{
            type_qualifier{pointer,
              identifier{"char"}}}}
        var_decl{
          identifier{"size"}
          :type_expr{
            identifier{"usize"}}})
      :type_expr{
        type_qualifier{pointer,
          identifier{"char"}}}
compound_stmt{
        decl_list{
          var_decl{
            identifier{"newstr"}
            =}}
        stmt_list{
          call_expr{
            identifier{"copy"}
            arg_list(
              identifier{"newstr"}
              identifier{"str"}
              identifier{"size"})}
          binary_expr{
            index_expr{
              identifier{"newstr"}
              identifier{"size"}}
            =
            int_literal{0}}
          return_stmt{
                        identifier{"newstr"}}}}}
    func_decl{
      identifier{"copy"}
      arg_list(
        var_decl{
          identifier{"dest"}
          :type_expr{
            type_qualifier{pointer,
              identifier{"char"}}}}
        var_decl{
          identifier{"src"}
          :type_expr{
            type_qualifier{pointer,
              identifier{"char"}}}}
        var_decl{
          identifier{"size"}
          :type_expr{
            identifier{"usize"}}})
compound_stmt{
        stmt_list{
          call_expr{
            identifier{"mem::copy"}
            arg_list(
              
              
              identifier{"size"})}}}}
    func_decl{
      identifier{"set"}
      arg_list(
        var_decl{
          identifier{"dest"}
          :type_expr{
            type_qualifier{pointer,
              identifier{"char"}}}}
        var_decl{
          identifier{"value"}
          :type_expr{
            identifier{"char"}}}
        var_decl{
          identifier{"count"}
          :type_expr{
            identifier{"usize"}}})
compound_stmt{
        stmt_list{
          call_expr{
            identifier{"mem::set"}
            arg_list(
              
              identifier{"value"}
              identifier{"count"})}}}}
    import_decl{
      identifier{"std::io"}}
    func_decl{
      identifier{"strlen"}
      arg_list(
        var_decl{
          identifier{"str"}
          :type_expr{
            type_qualifier{pointer,
              identifier{"char"}}}})
      :type_expr{
        identifier{"usize"}}
compound_stmt{
        decl_list{
          var_decl{
            identifier{"c"}
            :type_expr{
              identifier{"usize"}}}
          var_decl{
            identifier{"p"}
            =identifier{"str"}}}
        stmt_list{
          }
        stmt_list{
          return_stmt{
                        identifier{"c"}}}}}
    func_decl{
      identifier{"equals"}
      arg_list(
        var_decl{
          identifier{"a"}
          :type_expr{
            type_qualifier{pointer,
              identifier{"char"}}}}
        var_decl{
          identifier{"b"}
          :type_expr{
            type_qualifier{pointer,
              identifier{"char"}}}})
      :type_expr{
        identifier{"bool"}}
compound_stmt{
        stmt_list{
          }
        stmt_list{
          }
        stmt_list{
          return_stmt{
                        bool_literal{true}}}}}}}
