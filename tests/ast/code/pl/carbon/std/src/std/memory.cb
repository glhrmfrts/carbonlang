code_unit{
  std/memory.cb
  decl_list{
    type_decl{I_allocator = type_expr{struct_type{decl_list{
            var_decl{alloc: type_expr{(type_expr{usize})type_expr{memory}}}
            var_decl{free: type_expr{(type_expr{type_qualifier{optional, memory}})type_expr{tuple_type{}}}}}}}}
    linkage_specifier{ extern var_decl{default_allocator: type_expr{type_qualifier{pointer, I_allocator}}}}
    type_decl{memory = type_expr{struct_type{decl_list{
            var_decl{ptr: type_expr{rawptr}}
            var_decl{len: type_expr{usize}}}}}}
    func_decl{as_memory (var_decl{a}) {
        stmt_list{
          return{init{type=type_expr{memory} (cast_expr{type_expr{rawptr} {& a[0]}}, call{sizeof (a)})}}}}}
    func_decl{copy (var_decl{dest: type_expr{rawptr}}, var_decl{src: type_expr{rawptr}}, var_decl{size: type_expr{usize}}) {
        decl_list{
          asm{push rdi
push rsi

mov rdi,rcx
mov rsi,rdx
mov rcx,r8
rep movsb

pop rsi
pop rdi
    }}}}
    func_decl{set (var_decl{dest: type_expr{rawptr}}, var_decl{value: type_expr{uint8}}, var_decl{count: type_expr{usize}}) {
        decl_list{
          asm{push rdi

mov rdi,rcx
mov rax,rdx
mov rcx,r8
rep stosb

pop rdi
    }}}}
    func_decl{set (var_decl{dest: type_expr{type_qualifier{optional, memory}}}, var_decl{value: type_expr{uint8}}) {
        stmt_list{
          call{set (dest.ptr, value, dest.len)}}}}}}
