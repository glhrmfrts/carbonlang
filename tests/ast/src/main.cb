code_unit{
  main.cb
  decl_list{
    import_decl{ std::alloc alloc}
    import_decl{ std::io}
    import_decl{ std::string}
    type_decl{Field2D = type_expr{struct_type{(var_decl{width: type_expr{int}}, var_decl{height: type_expr{int}}, var_decl{data: type_expr{type_qualifier{reference, int}}})}}}
    type_decl{Automaton = type_expr{struct_type{(var_decl{field: type_expr{Field2D}}, var_decl{new_field: type_expr{Field2D}})}}}
    func_decl{split (var_decl{str: type_expr{string}}, var_decl{delim: type_expr{char}}): type_expr{slice_type{[&] type_expr{string}}} {
        decl_list{
          var_decl{s = init{type=type_expr{string} ("", 0)}}}
        stmt_list{
          return{init{type=type_expr{slice_type{[&] type_expr{string}}} ({& s}, 1)}}}}}
    func_decl{map (var_decl{str: type_expr{slice_type{[*] type_expr{string}}}}, var_decl{f: type_expr{(type_expr{string})type_expr{string}}}): type_expr{slice_type{[&] type_expr{string}}} {
        decl_list{
          var_decl{s = init{type=type_expr{string} ("", 0)}}}
        stmt_list{
          return{init{type=type_expr{slice_type{[&] type_expr{string}}} ({& s}, 1)}}}}}
    func_decl{filter (var_decl{str: type_expr{slice_type{[*] type_expr{string}}}}, var_decl{f: type_expr{(type_expr{string})type_expr{bool}}}): type_expr{slice_type{[&] type_expr{string}}} {
        decl_list{
          var_decl{s = init{type=type_expr{string} ("", 0)}}}
        stmt_list{
          return{init{type=type_expr{slice_type{[&] type_expr{string}}} ({& s}, 1)}}}}}
    func_decl{trim (var_decl{str: type_expr{string}}): type_expr{string} {
        decl_list{
          var_decl{f: type_expr{char} = 3}}
        stmt_list{
          return{init{type=type_expr{string} ({& f}, 1)}}}}}
    func_decl{append (var_decl{str: type_expr{type_qualifier{pointer, string}}}, var_decl{c: type_expr{char}}): type_expr{string} {
        stmt_list{
          return{init{type=type_expr{string} ("", 0)}}}}}
    func_decl{make_field (var_decl{sx: type_expr{int}}, var_decl{sy: type_expr{int}}): type_expr{Field2D} {
        stmt_list{
          return{init{type=type_expr{Field2D} (sx, sy, cast_expr{type_expr{type_qualifier{reference, int}} call{alloc::alloc ({{call{sizeof (int)} * sx} * sy})}})}}}}}
    func_decl{set (var_decl{f: type_expr{type_qualifier{reference, Field2D}}}, var_decl{x: type_expr{int}}, var_decl{y: type_expr{int}}, var_decl{val: type_expr{int}}) {
        stmt_list{
          {f.data[{{y * f.width} + x}] = val}}}}
    func_decl{get (var_decl{f: type_expr{type_qualifier{pointer, Field2D}}}, var_decl{x: type_expr{int}}, var_decl{y: type_expr{int}}): type_expr{int} {
        stmt_list{
          return{f.data[{{y * f.width} + x}]}}}}
    func_decl{clear (var_decl{f: type_expr{type_qualifier{reference, Field2D}}}) {
        stmt_list{
          call{alloc::set (cast_expr{type_expr{rawptr} f.data}, 0, {{f.width * f.height} * call{sizeof (int)}})}}}}
    func_decl{make_automaton (var_decl{ftext: type_expr{string}}): type_expr{Automaton} {
        decl_list{
          var_decl{f = call{split (ftext, )}}
          var_decl{height = cast_expr{type_expr{int} f.len}}
          var_decl{width = 0}}
        stmt_list{
                      (y)            init{(0, f.len)}            {
              stmt_list{
                if{{width < f[y].len} {
                    stmt_list{
                      {width = cast_expr{type_expr{int} f[y].len}}}}}}}}
        decl_list{
          var_decl{field = call{make_field (width, height)}}
          var_decl{newfield = call{make_field (width, height)}}}
        stmt_list{
                      (y)            init{(0, field.height)}            {
              stmt_list{
                                  (x)                  init{(0, field.width)}                  {
                    decl_list{
                      var_decl{val = {{x < f[y].len} 	 {f[y][x]  }}10}}
                    stmt_list{
                      call{field.set (x, y, val)}}}}}}
        stmt_list{
          return{init{type=type_expr{Automaton} (field, newfield)}}}}}
    func_decl{update (var_decl{a: type_expr{type_qualifier{reference, Automaton}}}) {
        stmt_list{
          call{a.new_field.clear ()}
                      (y)            init{(1, a.field.height)}            {
              stmt_list{
                                  (x)                  init{(1, a.field.width)}                  {
                    decl_list{
                      var_decl{moore_sum = {{{{{{{{{0 + call{a.field.get ({x - 1}, {y - 1})}} + call{a.field.get (x, {y + 1})}} + call{a.field.get ({x + 1}, {y - 1})}} + call{a.field.get ({x - 1}, y)}} + 0} + call{a.field.get ({x + 1}, y)}} + call{a.field.get ({x - 1}, {y + 1})}} + call{a.field.get (x, {y + 1})}} + call{a.field.get ({x + 1}, {y + 1})}}}
                      var_decl{cell = call{a.field.get (x, y)}}
                      var_decl{alive = {cell  1}{{moore_sum  2} 
 {moore_sum  3}}{moore_sum  3}}}
                    stmt_list{
                      call{a.new_field.set (x, y, alive10)}}}}}}
        decl_list{
          var_decl{tmp = a.field}}
        stmt_list{
          {a.field = a.new_field}
          {a.new_field = tmp}}}}
    func_decl{print (var_decl{a: type_expr{type_qualifier{pointer, Automaton}}}) {
        stmt_list{
                      (y)            init{(1, a.field.height)}            {
              decl_list{
                var_decl{s = init{type=type_expr{string} ("    ", 4)}}}
              stmt_list{
                                  (x)                  init{(1, a.field.width)}                  {
                    decl_list{
                      var_decl{cell = call{a.field.get (x, y)}}}
                    stmt_list{
                      {s = call{s.append ({cell  1})}}}}}
              stmt_list{
                call{println (s.data)}}}}
        stmt_list{
          call{println ("")}}}}
    func_decl{gun (): type_expr{Automaton} {
        decl_list{
          var_decl{gunfield = "*******************************************
*                                         *
*  A shooting gun:                        *
*                          #              *
*                        # #              *
*              ##      ##            ##   *
*             #   #    ##            ##   *
*  ##        #     #   ##                 *
*  ##        #   # ##    # #              *
*            #     #       #              *
*             #   #                       *
*              ##                         *
*                                         *
*  Tetris Life:                           *
*                                         *
*  ##       ####                          *
*  ##                                     *
*                                         *
*                                         *
*                                         *
*  #         ##                           *
*  ###      ##                            *
*                                         *
*                                         *
*                                         *
*        #                                *
*       ###                               *
*                                         *
*                                         *
*                                         *
*                                         *
*******************************************"}}
        stmt_list{
          return{call{make_automaton (init{type=type_expr{string} (gunfield, gunfield.strlen)})}}}}}
    func_decl{main (var_decl{args: type_expr{slice_type{[*] type_expr{string}}}}): type_expr{int} {
        decl_list{
          var_decl{a = call{gun ()}}}
        stmt_list{
                      (i)            init{(0, 50)}            {
              stmt_list{
                call{a.update ()}
                call{a.print ()}}}}
        stmt_list{
          return{0}}}}}}
