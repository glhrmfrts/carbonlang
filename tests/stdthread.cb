package std;
module thread;

type Thread = {
    f: raw_ptr,
    fdata: raw_bytes,
    fdatasize: usize,
    handle: && ThreadImpl,
};

static func make_thread[Func,Args...] = (f: Func, a: Args...): && Thread {
    static let execfunc = execute_func[Func,Args];
    static type Arguments = tupleof[toreference(Args)...];

    let argdata = && Arguments{ a... };

    let t = && ThreadImpl{.function=execfunc, .arg=argdata.raw_bytes .argsize=typesize(Arguments) };

    return t;
}