code_unit{
  std/platform.cb
  decl_list{
    type_decl{error = type_expr{int}}
    type_decl{memory = type_expr{struct_type{decl_list{
            var_decl{(ptr): type_expr{&opaque}}
            var_decl{(len): type_expr{usize}}}}}}
    linkage_specifier{ extern func_decl{alloc (var_decl{($cb_agg_ret): }, var_decl{(sz): type_expr{usize}}):  }}
    linkage_specifier{ extern func_decl{alloc2 (var_decl{($cb_agg_ret): }, var_decl{(sz): type_expr{usize}}, var_decl{(extra): type_expr{&opaque}}):  }}
    linkage_specifier{ extern func_decl{free (var_decl{(m): type_expr{type_qualifier{optional, memory}}}) }}
    linkage_specifier{ extern func_decl{write (var_decl{(fd): type_expr{int}}, var_decl{(data): }): type_expr{isize} }}
    linkage_specifier{ extern func_decl{read (var_decl{(fd): type_expr{int}}, var_decl{(data): }): type_expr{isize} }}
    var_decl{(O_CREATE) = 1}
    var_decl{(O_WRITE) = 2}
    var_decl{(O_READ) = 4}
    var_decl{(O_APPEND) = 8}
    linkage_specifier{ extern func_decl{open (var_decl{($cb_agg_ret): }, var_decl{(path): type_expr{type_qualifier{optional, type_qualifier{ uint8}}}}, var_decl{(flags): type_expr{int}}, var_decl{(mode): type_expr{int}}):  }}
    linkage_specifier{ extern func_decl{get_stdout_fd (): type_expr{int} }}
    linkage_specifier{ extern func_decl{get_stderr_fd (): type_expr{int} }}
    linkage_specifier{ extern func_decl{get_stdin_fd (): type_expr{int} }}
    linkage_specifier{ extern func_decl{get_fd_flags (var_decl{(fd): type_expr{int}}): type_expr{int} }}
    linkage_specifier{ extern func_decl{close (var_decl{(fd): type_expr{int}}) }}}}
