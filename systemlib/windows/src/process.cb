import std::system
import io

// TODO: make this work without casting the nullptr: (pwd.len > 0 then pwd.ptr else nullptr)

const STARTF_USESTDHANDLES = 0x00000100
const CREATE_NO_WINDOW     = 0x08000000

type STARTUPINFOA = struct {
    cb: int;
    lpReserved: *uint8;
    lpDesktop: *uint8;
    lpTitle: *uint8;
    dwX: int;
    dwY: int;
    dwXSize: int;
    dwYSize: int;
    dwXCountChars: int;
    dwYCountChars: int;
    dwFillAttribute: int;
    dwFlags: int;
    wShowWindow: int16;
    cbReserved2: int16;
    lpReserved2: *uint8;
    hStdInput: rawptr;
    hStdOutput: rawptr;
    hStdError: rawptr;
}

type PROCESS_INFORMATION = struct {
    hProcess: rawptr;
    hThread: rawptr;
    dwProcessId: int;
    dwThreadId: int;
}

extern(C) func ExitProcess(uExitCode: uint)

extern(C) func CreatePipe(
    hReadPipe: *rawptr,
    hWritePipe: *rawptr,
    lpPipeAttributes: *SECURITY_ATTRIBUTES,
    nSize: int
): bool

extern(C) func TerminateProcess(handle: rawptr, exitCode: uint): bool

extern(C) func CreateProcessA(
    lpApplicationName: *pure uint8,
    lpCommandLine: *pure uint8,
    lpProcessAttributes: *pure SECURITY_ATTRIBUTES,
    lpThreadAttributes: *pure SECURITY_ATTRIBUTES,
    bInheritHandles: bool,
    dwCreationFlags: int32,
    lpEnvironment: rawptr,
    lpCurrentDirectory: *uint8,
    lpStartupInfo: *pure STARTUPINFOA,
    lpProcessInformation: *PROCESS_INFORMATION
): bool

extern(carbon, std::system) {
func exit(code: int) {
    ExitProcess(code)
}

func readProcessChar(handle: rawptr, c: &uint8): bool {
    let dwRead : int
    let bSuccess = ReadFile( handle, cast(rawptr)c, 1, &dwRead, nullptr )
    return bSuccess && (dwRead == 1)
}

func execProcess(cmdline: []pure uint8, pwd: []pure uint8): SystemError {
    let outputHandleRead  : rawptr
    let outputHandleWrite : rawptr
    let inputHandleRead   : rawptr
    let inputHandleWrite  : rawptr

    let saAttr : SECURITY_ATTRIBUTES
    saAttr.nLength = sizeof(SECURITY_ATTRIBUTES)
    saAttr.bInheritHandle = true
    saAttr.lpSecurityDescriptor = nullptr

    if (!CreatePipe(&outputHandleRead, &outputHandleWrite, &saAttr, 0)) {
        return cast(SystemError)GetLastError()
    }
    if (!CreatePipe(&inputHandleRead, &inputHandleWrite, &saAttr, 0)) {
        return cast(SystemError)GetLastError()
    }

    let si : STARTUPINFOA
    si.cb = sizeof(si)
    si.dwFlags |= STARTF_USESTDHANDLES
    si.hStdOutput = outputHandleWrite
    si.hStdError = outputHandleWrite
    si.hStdInput = inputHandleRead

    let pi : PROCESS_INFORMATION
    let success = CreateProcessA(
        nullptr,
        cmdline.ptr,
        nullptr,
        nullptr,
        true,
        CREATE_NO_WINDOW,
        nullptr,
        (pwd.len > 0 then cast(*uint8)pwd.ptr else cast(*uint8)nullptr),
        &si,
        &pi
    )
    if (!success) {
        return cast(SystemError)GetLastError()
    }

    // Close handles to the stdin and stdout pipes no longer needed by the child process.
    // If they are not explicitly closed, there is no way to recognize that the child process has ended.
    CloseHandle(outputHandleWrite)
    CloseHandle(inputHandleRead)

    let c : uint8
    while (readProcessChar(outputHandleRead, &c)) {
        write(getStdoutFd(), []pure uint8{&c, 1})
    }
    let err = cast(SystemError)GetLastError()
    if (err != 0 && err != 109) {
        return err 
    }

    CloseHandle(inputHandleWrite)
    CloseHandle(outputHandleRead)
    TerminateProcess(pi.hProcess, 0)

    // Close handles to the child process and its primary thread.
    CloseHandle(pi.hProcess)
    CloseHandle(pi.hThread)

    return 0
}
}