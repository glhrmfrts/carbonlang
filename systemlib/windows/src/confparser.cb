import std::system
import string

type KeyVal = struct {
    key: []pure uint8
    val: []pure uint8
    next: &KeyVal
}

type ConfSection = struct {
    name: []pure uint8
    keyvals: &KeyVal
    next: &ConfSection
}

type Conf = struct {
    sections: &ConfSection
}

func addSection(conf: &Conf, name: []pure uint8): &ConfSection {
    let newsection = cast(&ConfSection) (alloc(sizeof(ConfSection)).first)
    newsection.name = name
    newsection.keyvals = nil
    newsection.next = conf.sections
    conf.sections = newsection
    return newsection
}

func addKeyVal(sec: &ConfSection, key: []pure uint8, val: []pure uint8) {
    let kv = cast(&KeyVal) (alloc(sizeof(KeyVal)).first)
    kv.key = key
    kv.val = val
    kv.next = sec.keyvals
    sec.keyvals = kv
}

func parseConf(src: []pure uint8): {Conf, error} {
    let conf : Conf
    let lines = split(src, "\n")

    let currentsection : &ConfSection

    // TODO: trim strings

    for (i in 0,lines.len) {
        let line = trim(lines[i])

        // TODO(bug): fix continue jump
        //if (line.len == 0) { continue }

        if (line.len > 0) {
            if (line[0] == '[') {
                let end, ok = find(line, ']')
                if (ok) {
                    let secname = line->copyRange(1, end)
                    //print("section: ")
                    //println(secname)
                    currentsection = conf->addSection(secname)
                }
            }
            // TODO(feature): else if (let eq,ok = find(line, '='); ok)
            else {
                let eqpos, ok = find(line, '=')
                if (ok) {
                    let key = line->copyRange(0, eqpos)
                    let value = line->copyRange(eqpos + 1, line.len)
                    //print(key) print(" = ") print(value) print("\n")
                    if (currentsection != nil) {
                        currentsection->addKeyVal(trim(key), trim(value))
                    }
                }
            }
        }
    }

    return conf, noerror
}

func readConf(filename: []pure uint8): {Conf, error} {
    let conf : Conf
    let statbuf : Stat

    let err = stat(filename, &statbuf)
    if (err!=noerror) { return conf, err }

    let filebuf, err = alloc(statbuf.size + 1)
    if (err!=noerror) { return conf, err }
    defer free(filebuf)

    import gameoflife
    memset(filebuf, 0, statbuf.size + 1)

    let filedata = []uint8{ cast(&uint8)filebuf, statbuf.size }
    
    let handle, err = open(filename, READ, 0)
    if (err!=noerror) { return conf, err }
    defer close(handle)

    read(handle, filedata)

    conf, err = parseConf(filedata)
    return conf, err
}