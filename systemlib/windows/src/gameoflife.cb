import std::system as system
import test as t

type Field2D = struct {
    data: &int
    width: int
    height: int
}

type Automaton = struct {
    field:      Field2D
    new_field:  Field2D
}

func print(str: []pure uint8) {
    system::write(system::getStdoutFd(), str)
}

func println(str: []pure uint8) {
    system::write(system::getStdoutFd(), str)
    system::write(system::getStdoutFd(), "\n")
}

func print(i: int) {
    t::writeInt(system::getStdoutFd(), i)
}

func println(i: int) {
    t::writeInt(system::getStdoutFd(), i)
    system::write(system::getStdoutFd(), "\n")
}

func memcopy(dest: rawptr, src: rawptr, size: usize) {
    asm%{
push rdi
push rsi

mov rdi,rcx
mov rsi,rdx
mov rcx,r8
rep movsb

pop rsi
pop rdi
    }%asm
}

func memset(dest: rawptr, value: uint8, count: usize) {
    asm%{
push rdi

mov rdi,rcx
mov rax,rdx
mov rcx,r8
rep stosb

pop rdi
    }%asm
}

func allocString(sz: usize): []uint8 {
    let data = system::alloc(sz + 1)
    memset(data, 0, sz + 1)
    return []uint8{ (cast(&uint8)data), sz }
}

func copySubstr(s: []pure uint8, start: usize, end: usize): []pure uint8 {
    let size = end - start
    let newstr = allocString(size)
    memcopy(cast(rawptr)newstr.ptr, cast(rawptr)(&s[start]), size)
    return newstr
}

func freeListOfStrings(list: [][]pure uint8) {
}

func append(s: []pure uint8, c: uint8): []pure uint8 {
    return ""
}

func find(s: []pure uint8, ned: uint8): {int, bool} {
    for (i in 0,s.len) {
        if (s[i] == ned) {
            return i, true
        }
    }
    return -1, false
}

func split(s: []pure uint8, ned: []pure uint8): [][]pure uint8 {
    let prefix = s
    let suffix = s

    let index, ok = find(suffix, ned[0])
    if (!ok) {
        // TODO(feature): return nil
        return [][]pure uint8{}
    }

    // TODO(feature): let list : Array([]pure uint8)
    let listbuf = system::alloc(16 * cast(usize)100)
    let list = [][]pure uint8{ (cast(&[]pure uint8)listbuf), 0 }
    let listsize = 0

    while (ok) {
        prefix = copySubstr(suffix, 0, index)
        suffix = copySubstr(suffix, index + 1, suffix.len)

        list[listsize] = prefix
        listsize += 1

        // TODO(feature): index, ok = find(suffix, ned[0])
        let newfind = find(suffix, ned[0])
        index = newfind.first
        ok = newfind.second
    }

    list.len = listsize

    return list
}

func makeField(sx: int, sy: int): Field2D {
    // TODO(bug): let data = system::alloc(sizeof(int)*sx*sy)
    print("makeField: ")
    print(sx)
    print(", ")
    print(sy)
    println("")
    let data = system::alloc(sizeof(int)*(cast(usize)sx)*(cast(usize)sy))
    return Field2D{ (cast(&int)data), sx, sy }
}

func set(f: &Field2D, x: int, y: int, val: int) {
    f.data[y * f.width + x] = val
}

func get(f: &pure Field2D, x: int, y: int): int {
    return f.data[y * f.width + x]
}

func clear(f: &Field2D) {
    memset(f.data, 0, f.width*f.height*sizeof(int))
}

func makeAutomaton(ftext: []pure uint8): Automaton {
    let f = ftext->split("\n")
    defer freeListOfStrings(f)

    let height = cast(int) f.len
    let width  = 0

    for (y in 0,f.len) {
        if (width < f[y].len) {
            width = cast(int) f[y].len
        }
    }

    let field    = makeField(width, height)
    let newfield = makeField(width, height)

    for (y in 0,field.height) {
        for (x in 0,field.width) {
            field->set(x, y, ((x < f[y].len && f[y][x] == '#') then 1 else 0))
        }
    }

    let a = Automaton{}
    a.field = field
    a.new_field = newfield
    return a
}

func update(a: &Automaton) {
    a.new_field->clear()
    for (y in 1,a.field.height - 1) {
        for (x in 1,a.field.width - 1) {
            let moore_sum = (
                a.field->get(x-1, y-1)
                + a.field->get(x, y-1)
                + a.field->get(x+1, y-1)
                + a.field->get(x+1, y)
                + a.field->get(x+1, y+1)
                + a.field->get(x, y+1)
                + a.field->get(x-1, y+1)
                + a.field->get(x-1, y)
            )
            let cell = a.field->get(x, y)
            let alive = (cell == 1) then (moore_sum == 2 || moore_sum == 3) else (moore_sum == 3)
            a.new_field->set(x, y, alive then 1 else 0)
        }
    }
    let tmp = a.field
    a.field = a.new_field
    a.new_field = tmp
}

func print(a: &Automaton) {
    let buf = system::alloc(a.field.width * a.field.height + 256)
    defer system::free(buf)

    print(a.field.width)
    print(", ")
    print(a.field.height)
    println("")

    for (y in 0,a.field.height) {
        memset(buf, 0, a.field.width * a.field.height + 256)
        let s = []uint8{ (cast(&uint8)buf), 0 }

        for (x in 0,a.field.width) {
            let cell = a.field->get(x,y)

            // TODO(bug): s[y*a.field.width+x] = cell == 1 then '@' else '.'
            s[x] = cell == 1 then '@' else '.'

            s.len += 1
        }

        println(s)
    }

	println("print ended")
}

func makeGun(): Automaton {
    let gunfield = "*******************************************
*                                         *
*  A shooting gun:                        *
*                                         *
*                                         *
*                                         *
*                     #    #              *
*  ##                 #    #              *
*  ##                 #    #              *
*                                         *
*                                         *
*                                         *
*                                         *
*******************************************"
    return makeAutomaton(gunfield)
}

func gameOfLife() {
    let a = makeGun()
    for (i in 0,150) {
        a->update()
        a->print()
        system::sleepMs(200)
    }
}