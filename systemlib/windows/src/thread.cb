import std::system
import io

type CRITICAL_SECTION = struct {
    DebugInfo: &opaque;

    //
    // The following three fields control entering and exiting the critical
    // section for the resource
    //

    LockCount: int64;
    RecursionCount: int64;
    OwningThread: &opaque;        // from the thread's ClientId->UniqueThread
    LockSemaphore: &opaque;
    SpinCount: &uint64;        // force size on 64-bit systems when packed
}

type SYSTEM_INFO = struct {
    unused:   int32;
    dwPageSize: int32;
    lpMinimumApplicationAddress: &opaque;
    lpMaximumApplicationAddress: &opaque;
    dwActiveProcessorMask: &int32;
    dwNumberOfProcessors: int32;
    dwProcessorType: int32;
    dwAllocationGranularity: int32;
    wProcessorLevel: int16;
    wProcessorRevision: int16;
}

extern(C) func InitializeCriticalSection(cs: &CRITICAL_SECTION)

extern(C) func EnterCriticalSection(cs: &CRITICAL_SECTION)

extern(C) func LeaveCriticalSection(cs: &CRITICAL_SECTION)

extern(C) func DeleteCriticalSection(cs: &CRITICAL_SECTION)

extern(C) func GetCurrentThreadId(): int

extern(C) func GetSystemInfo(si: &SYSTEM_INFO)

extern(C) func CreateThread(
    lpSecurityAttributes: &pure SECURITY_ATTRIBUTES,
    cbStack: int,
    lpStartAddr: {&opaque} -> {},
    lpParam: &opaque,
    fdwCreate: int,
    threadId: &int32
): &opaque

extern(C) func WaitForSingleObject(handle: &opaque, dwMilliseconds: int): int

extern(C) func Sleep(ms: int)

extern(carbon, std::system) {
func makeThread(fn: {&opaque} -> {}, arg: &opaque): {ThreadHandle, error} {
    let threadId : int32

    let th = CreateThread(nil, 0, fn, arg, 0, &threadId)
    if (th == cast(&opaque)(cast(uintptr)INVALID_HANDLE_VALUE)) {
        return nil, INVALID_HANDLE
    }

    return th, noerror
}

const INFINITE_TIMEOUT = 0xFFFFFFFF

func join(th: ThreadHandle) {
    WaitForSingleObject(th, INFINITE_TIMEOUT)
}

func threadId(): int {
    return GetCurrentThreadId()
}

func cpuCount(): int {
    let si : SYSTEM_INFO
    GetSystemInfo(&si)
    return si.dwNumberOfProcessors
}

func makeMutex(): {MutexHandle, error} {
    let cs = cast(&CRITICAL_SECTION)(alloc(sizeof(CRITICAL_SECTION)).first)
    InitializeCriticalSection(cs)
    return cast(MutexHandle)cs, noerror
}

func lock(m: MutexHandle) {
    EnterCriticalSection(cast(&CRITICAL_SECTION)(m))
}

func unlock(m: MutexHandle) {
    LeaveCriticalSection(cast(&CRITICAL_SECTION)(m))
}

func destroy(m: MutexHandle) {
    let cs = cast(&CRITICAL_SECTION)(m)
    DeleteCriticalSection(cs)
    // TODO: free(memoryFromPointer((cs)))
    free(cast(&opaque)cs)
}

func sleepMs(ms: uint64) {
    Sleep(cast(int) ms)
}
}