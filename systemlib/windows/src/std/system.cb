// Low-level system provided layer

type SystemError = enum {
    NoError
    PathNotFound
    InvalidHandle
}

/*
typealias SystemError = int
const NoError : SystemError = 0
*/

// memory.cb

extern func alloc(sz: usize): rawptr

extern func alloc(sz: usize, extra: rawptr): rawptr

extern func free(m: rawptr)


// io.cb

extern func write(fd: rawptr, data: []pure uint8): isize

extern func read(fd: rawptr, data: []uint8): isize

type OpenFlags = enumflags {
    Create
    Write
    Read
    Append
}

extern func open(path: []pure uint8, flags: OpenFlags, mode: int): {rawptr, SystemError}

extern func getStdoutFd(): rawptr

extern func getStderrFd(): rawptr

extern func getStdinFd(): rawptr

extern func getFdFlags(fd: rawptr): int

extern func close(fd: rawptr): SystemError

const SEEK_SET = 0
const SEEK_CUR = 1
const SEEK_END = 2
const SEEK_DATA = 3
const SEEK_HOLE = 4

extern func seek(fd: rawptr, offset: int64, whence: int)

type Stat = struct {
    size: usize
    mtime: int64
    atime: int64
    ctime: int64
    mode: int
}

extern func stat(filename: []pure uint8, buf: &Stat): SystemError

extern func stat(fd: rawptr, buf: &Stat): SystemError

extern func unlink(path: []pure uint8): SystemError

extern func remove(path: []pure uint8): SystemError

extern func rename(path: []pure uint8, dest: []pure uint8): SystemError

extern func copy(path: []pure uint8, dest: []pure uint8): SystemError

extern func mkdir(path: []pure uint8): SystemError


// process.cb

extern func exit(code: int)

extern func execProcess(cmdline: []pure uint8, pwd: []pure uint8): SystemError


// thread.cb

typealias ThreadHandle = rawptr

typealias MutexHandle = rawptr

extern func createThread(fn: {rawptr} -> {}, arg: rawptr): {ThreadHandle, SystemError}

extern func join(th: ThreadHandle): SystemError

extern func getThreadId(): int

extern func getCoreCount(): int

extern func createMutex(): {MutexHandle, SystemError}

extern func lock(m: MutexHandle): SystemError

extern func unlock(m: MutexHandle): SystemError

extern func destroy(m: MutexHandle)