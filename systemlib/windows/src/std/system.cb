// Low-level system provided layer

type syserror = enum {
    NOERROR
    PATHNOTFOUND
    INVALIDHANDLE
}

// memory.cb

extern func alloc(sz: usize): {&opaque, syserror}

extern func alloc(sz: usize, extra: &opaque): {&opaque, syserror}

extern func free(m: &opaque)


// io.cb

typealias FileHandle = &opaque

extern func write(fd: FileHandle, data: []pure uint8): isize

extern func read(fd: FileHandle, data: []uint8): isize

type OpenFlags = enumflags {
    CREATE
    WRITE
    READ
    APPEND
}

extern func open(path: []pure uint8, flags: OpenFlags, mode: int): {FileHandle, syserror}

extern func stdout(): FileHandle

extern func stderr(): FileHandle

extern func stdin(): FileHandle

extern func fdflags(fd: FileHandle): int

extern func close(fd: FileHandle): syserror

type Whence = enum {
    SEEKSET
    SEEKCURRENT
    SEEKEND
    SEEKDATA
    SEEKHOLE
}

extern func seek(fd: FileHandle, offset: int64, w: Whence)

type Stat = struct {
    size: usize
    mtime: int64
    atime: int64
    ctime: int64
    mode: int
}

extern func stat(filename: []pure uint8, buf: &Stat): syserror

extern func stat(fd: FileHandle, buf: &Stat): syserror

extern func unlink(path: []pure uint8): syserror

extern func remove(path: []pure uint8): syserror

extern func rename(path: []pure uint8, dest: []pure uint8): syserror

extern func copy(path: []pure uint8, dest: []pure uint8): syserror

extern func mkdir(path: []pure uint8): syserror


// process.cb

extern func exit(code: int)

extern func process(cmdline: []pure uint8, pwd: []pure uint8): syserror


// thread.cb

typealias ThreadHandle = &opaque

typealias MutexHandle = &opaque

extern func makethread(fn: {&opaque} -> {}, arg: &opaque): {ThreadHandle, syserror}

extern func join(th: ThreadHandle): syserror

extern func threadid(): int

extern func cpucount(): int

extern func makemutex(): {MutexHandle, syserror}

extern func lock(m: MutexHandle): syserror

extern func unlock(m: MutexHandle): syserror

extern func destroy(m: MutexHandle)

extern func sleepms(ms: uint64)