import module

func parseIntRem(s : []pure uint8, radix : int) : {int, []pure uint8, bool} {
    let value : int
    let count : usize

    for (i in 0,s.len) {
        if (false) {
            value = value * radix + (s[i] - '0')
            count += 1
        }
        else {
            break
        }
    }

    return value, nil, count > 0
}

extern(C) func carbon_main() : int {
    // let haystack = "Hello world"
    
    // let hello = haystack[2, 5]

// TODO: fix name clash with function
    // let cstat : Stat
    // let size = cstat.st_atime
/*
    let val : {usize, bool} = {0, false}
    let val2 : {usize, bool} = {0, true}

    let eq = val == val2
*/

/*
    let ptr : &{usize, usize}
    @ptr = {cast(usize)0, cast(usize)0}

    takeString("Hello")

    takeString("Hello")

    let values  : {usize, {usize, usize}}

    let eq : int
    if (values == {cast(usize)0, {cast(usize)0, cast(usize)0}}) {
        eq = 1
    }
    else {
        eq = 0
    }
*/

    let val : {usize,usize}

    let ptr = &val.second

    return 0
}