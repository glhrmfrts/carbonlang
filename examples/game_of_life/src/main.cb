import std::alloc as alloc
import std::io
import std::string
import std::rawstring
import std::collection_algorithms

type Field2D = struct {
    data: &int
    width: int
    height: int
}

type Automaton = struct {
    field:      Field2D
    new_field:  Field2D
}

T            => abstract T
pure T       => abstract T
& T          => abstract T
& pure T     => abstract T
* T          => abstract T
* pure T     => abstract T

// Returns an empty instance of the collection of type T
generic func empty(`T)

// Returns a duplicate instance of the collection x of type T
generic func duplicate(`T, x: abstract T): abstract T

// Returns a new (or the same) instance of the collection x with the element it appended to the end of it
generic func append(`T, `It, x: abstract T, it: It): abstract T

func filter(xs, fn) {
    let new_xs = empty(`typeof(xs))
    for (x in xs) {
        if (fn(x)) {
            new_xs = append(new_xs, x)
        }
    }
}

generic func duplicate(`String, str: &pure String) {

}

func split(str: &string, delim: char): []string {
    auto s = string{"", 0}
    return []string{ &s, 1 }
}

func map(str: []string, f: {string} -> string): []string {
    auto s = string{"", 0}
    return []string{ &s, 1 }
}

func filter(str: []string, f: {string} -> bool): []string {
    auto s = string{"", 0}
    return []string{ &s, 1 }
}

func trim(str: &string): string {
    auto f : char = 3
    return string{ &f, 1 }
}

func append(str: &string, c: char): string {
    auto f : char = 3
    return string{ &f, 1 }
}

func make_field(sx: int, sy: int): Field2D {
    return Field2D{
        .data = mem::alloc_zero(sizeof(int)*sx*sy),
        {.width, .height} = {sx, sy}
    }
}

func set(f: &Field2D, x: int, y: int, val: int) {
    f.data[y * f.width + x] = val
}

func get(f: &pure Field2D, x: int, y: int): int {
    return f.data[y * f.width + x]
}

func clear(f: &Field2D) {
    mem::set(cast(pointer) f.data, 0, f.width*f.height*sizeof(int))
}

func make_automaton(ftext: string): Automaton {
    let f = ftext -> split('\n') -> map(lambda %1->trim) -> filter(lambda %1->len)

    let height = cast(int) f.len
    let width  = 0

    for (y in 0,f.len) {
        if (width < f[y].len) {
            width = cast(int) f[y].len
        }
    }

    let field    = make_field(width, height)
    let newfield = make_field(width, height)

    for (y in 0, field.height) {
        for (x in 0, field.width) {
            field.set(x, y, (x < f[y].len && f[y][x] == '#' then 1 else 0))
        }
    }

    let a = Automaton{}
    a.field = field
    a.new_field = newfield
    return a
}

func update(a: &Automaton) {
    a.new_field->clear()

    for (y in 1,a.field.height) {
        for (x in 1,a.field.width) {
            let moore_sum = (
                0 + a.field->get(x-1, y-1) + a.field->get(x,y+1) + a.field->get(x+1, y-1) +
                a.field->get(x-1, y) + 0 + a.field->get(x+1, y) + a.field->get(x-1, y+1) +
                a.field->get(x,y+1) + a.field->get(x+1, y+1)
            )
            let cell = a.field->get(x, y)
            let alive = cell == 1 then (moore_sum == 2 || moore_sum == 3) else moore_sum == 3
            a.new_field->set(x, y, alive then 1 else 0)
        }
    }
    let tmp = a.field
    a.field = a.new_field
    a.new_field = tmp
}

func print(a: &Automaton) {
    for (y in 1,a.field.height) {
        let s = "    "
        for (x in 1,a.field.width) {
            let cell = a.field.get(x,y)
            s = s.append(cell == 1 then '@' else '.')
        }
        println(s.data)
    }
	println("")
}

func gun(): Automaton {
    let gunfield = "*******************************************
*                                         *
*  A shooting gun:                        *
*                          #              *
*                        # #              *
*              ##      ##            ##   *
*             #   #    ##            ##   *
*  ##        #     #   ##                 *
*  ##        #   # ##    # #              *
*            #     #       #              *
*             #   #                       *
*              ##                         *
*                                         *
*  Tetris Life:                           *
*                                         *
*  ##       ####                          *
*  ##                                     *
*                                         *
*                                         *
*                                         *
*  #         ##                           *
*  ###      ##                            *
*                                         *
*                                         *
*                                         *
*        #                                *
*       ###                               *
*                                         *
*                                         *
*                                         *
*                                         *
*******************************************"
    return make_automaton(gunfield)
}

func main(args: []string): int {
    let a = gun()

    for (i in 0,50) {
        import std::threading, std::time

        a.update()
        a.print()
        sleep(100->milliseconds())
    }
    return 0
}