code_unit{
  main.cb
  decl_list{
    type_decl{data1 = type_expr{struct_type{decl_list{
            var_decl{f: type_expr{int64}}
            var_decl{b: type_expr{int64}}}}}}
    func_decl{makedata1 (var_decl{$cb_agg_ret: }):  {
        stmt_list{
          {{@ $cb_agg_ret} = init{type=type_expr{data1} 
            {{@ $cb_agg_ret}.f = cast_expr{ 0}}
            {{@ $cb_agg_ret}.b = cast_expr{ 0}}
            }}
          return{$cb_agg_ret}}}}
    func_decl{makedata2 (var_decl{$cb_agg_ret: }, var_decl{d: }):  {
        stmt_list{
          {{@ $cb_agg_ret} = init{type=type_expr{data1} 
            {{@ $cb_agg_ret}.f = {{@ d}.f + 2}}
            {{@ $cb_agg_ret}.b = {{@ d}.b + 2}}
            }}
          return{$cb_agg_ret}}}}
    type_decl{I_allocator = type_expr{struct_type{decl_list{
            var_decl{alloc: type_expr{rawptr}}
            var_decl{free: type_expr{rawptr}}}}}}
    linkage_specifier{ extern var_decl{default_allocator: type_expr{type_qualifier{pointer, I_allocator}} = }}
    linkage_specifier{ extern(C) func_decl{myentrypoint (): type_expr{int} {
          decl_list{
            var_decl{$cbT0 = call{makedata1 ()}}
            call{makedata2 ({& data}, {& $cbT0})}
            var_decl{data}}
          stmt_list{
            return{0}}}}}}}
