code_unit{
  std/memory.cb
  decl_list{
    import_decl{ std::platform}
    type_decl{memory = type_expr{struct_type{decl_list{
            var_decl{ptr: type_expr{rawptr}}
            var_decl{len: type_expr{usize}}}}}}
    func_decl{as_memory (var_decl{a}) {
        stmt_list{
          return{init{type=type_expr{memory} (cast_expr{type_expr{rawptr} {& a[0]}}, call{sizeof (a)})}}}}}
    type_decl{I_allocator = type_expr{struct_type{decl_list{
            var_decl{alloc: type_expr{(type_expr{type_qualifier{optional, I_allocator}}, type_expr{usize})type_expr{memory}}}
            var_decl{free: type_expr{(type_expr{type_qualifier{optional, I_allocator}}, type_expr{type_qualifier{optional, memory}})type_expr{tuple_type{}}}}}}}}
    visibility_specifier{ private func_decl{platform_alloc (var_decl{$cb_agg_ret: }, var_decl{self: type_expr{type_qualifier{optional, I_allocator}}}, var_decl{sz: type_expr{usize}}):  {
          stmt_list{
            {{@ $cb_agg_ret} = init{type=type_expr{memory} 
              {{@ $cb_agg_ret}.ptr = call{alloc (sz)}}
              {{@ $cb_agg_ret}.len = sz}
              }}
            return{$cb_agg_ret}}}}}
    visibility_specifier{ private func_decl{platform_free (var_decl{self: type_expr{type_qualifier{optional, I_allocator}}}, var_decl{m: type_expr{type_qualifier{optional, memory}}}) {
          stmt_list{
            call{free (m.ptr)}}
          stmt_list{
            {m.ptr = }}
          stmt_list{
            {m.len = cast_expr{ 0}}}}}}
    func_decl{get_default_allocator (var_decl{allocator: type_expr{type_qualifier{optional, I_allocator}}}) {
        stmt_list{
          {allocator.alloc = platform_alloctype_expr{tuple_type{(type_expr{type_qualifier{optional, I_allocator}}, type_expr{usize})}}}}
        stmt_list{
          {allocator.free = platform_freetype_expr{tuple_type{(type_expr{type_qualifier{optional, I_allocator}}, type_expr{type_qualifier{optional, memory}})}}}}}}
    func_decl{copy (var_decl{dest: type_expr{rawptr}}, var_decl{src: type_expr{rawptr}}, var_decl{size: type_expr{usize}}) {
        decl_list{
          asm{push rdi
push rsi

mov rdi,rcx
mov rsi,rdx
mov rcx,r8
rep movsb

pop rsi
pop rdi
    }}}}
    func_decl{copy (var_decl{dest: type_expr{type_qualifier{optional, memory}}}, var_decl{src: type_expr{type_qualifier{optional, type_qualifier{ memory}}}}) {
        decl_list{
          if{{dest.len < src.len} {copylen = dest.len} else {copylen = src.len}}
          var_decl{copylen}}
        stmt_list{
          call{copy (dest.ptr, src.ptr, copylen)}}}}
    func_decl{set (var_decl{dest: type_expr{rawptr}}, var_decl{value: type_expr{uint8}}, var_decl{count: type_expr{usize}}) {
        decl_list{
          asm{push rdi

mov rdi,rcx
mov rax,rdx
mov rcx,r8
rep stosb

pop rdi
    }}}}
    func_decl{set (var_decl{dest: type_expr{type_qualifier{optional, memory}}}, var_decl{value: type_expr{uint8}}) {
        stmt_list{
          call{set (dest.ptr, value, dest.len)}}}}}}
