func cb$Nstd$Nio$Nprintln$AB$Araw_string -> void
    arg #0 c: raw_string;
    ir_call puts A0;
endf

func puts -> int
endf

func putc -> int
endf

func exit -> void
endf

func free -> int
endf

func malloc -> raw_ptr
endf

func rand -> int
endf

func system -> int
endf

func strlen -> usize
endf

func cb$Nstd$Nmemory$Nalloc$AB$Ausize -> raw_ptr
    arg #0 size: usize;
    ir_call malloc A0;
    ir_return ST;
endf

func cb$Nstd$Nmemory$Ndealloc$AB$Araw_ptr -> void
    arg #0 ptr: raw_ptr;
    ir_call free A0;
endf

func cb$Nstd$Nmemory$Ncopy$AB$Araw_ptr$Araw_ptr$Ausize -> void
    arg #0 dest: raw_ptr;
    arg #1 src: raw_ptr;
    arg #2 size: usize;
    ir_asm push rdi
push rsi

mov rdi,rcx
mov rsi,rdx
mov rcx,r8
rep movsb

pop rsi
pop rdi
    ;
endf

func cb$Nstd$Nmemory$Nset$AB$Araw_ptr$Achar$Ausize -> void
    arg #0 dest: raw_ptr;
    arg #1 value: char;
    arg #2 count: usize;
    ir_asm push rdi

mov rdi,rcx
mov rax,rdx
mov rcx,r8
rep stosb

pop rdi
    ;
endf

func cb$Nstd$Nrawstring$Ncopy$AB$Araw_string -> raw_string
    arg #0 str: raw_string;
    ir_call cb$Nstd$Nrawstring$Nlen$AB$Araw_string A0;
    ir_call cb$Nstd$Nrawstring$Ncopy$AB$Araw_string$Ausize A0 ST;
    ir_return ST;
endf

func cb$Nstd$Nrawstring$Ncopy$AB$Araw_string$Ausize -> raw_string
    arg #0 str: raw_string;
    arg #1 size: usize;
    local #0 newstr: raw_string;
    ir_add A1 1;
    ir_call cb$Nstd$Nmemory$Nalloc$AB$Ausize ST;
    ir_load L0 ST;
    ir_call cb$Nstd$Nrawstring$Ncopy$AB$Araw_string$Araw_string$Ausize L0 A0 A1;
    ir_index L0 A1;
    ir_load ST 0;
    ir_return L0;
endf

func cb$Nstd$Nrawstring$Ncopy$AB$Araw_string$Araw_string$Ausize -> void
    arg #0 dest: raw_string;
    arg #1 src: raw_string;
    arg #2 size: usize;
    ir_call cb$Nstd$Nmemory$Ncopy$AB$Araw_ptr$Araw_ptr$Ausize A0 A1 A2;
endf

func cb$Nstd$Nrawstring$Nset$AB$Araw_string$Achar$Ausize -> void
    arg #0 dest: raw_string;
    arg #1 value: char;
    arg #2 count: usize;
    ir_call cb$Nstd$Nmemory$Nset$AB$Araw_ptr$Achar$Ausize A0 A1 A2;
endf

func cb$Nstd$Nrawstring$Nlen$AB$Araw_string -> usize
    arg #0 str: raw_string;
    ir_call strlen A0;
    ir_return ST;
endf

func cb$Nstd$Nrawstring$Nequals$AB$Araw_string$Araw_string -> bool
    arg #0 a: raw_string;
    arg #1 b: raw_string;
    local #0 $foriter: range$$usize$$;
    local #1 i: usize;
    ir_load [L0 . 0] 0;
    ir_call cb$Nlen$AB$Araw_string A0;
    ir_load [L0 . 1] ST;
    ir_load L1 [L0 . 0];
    ir_make_label cb$Nstd$Nrawstring$Nequals$AB$Araw_string$Araw_string$f351$cond;
    ir_jmp_gte L1 [L0 . 1] cb$Nstd$Nrawstring$Nequals$AB$Araw_string$Araw_string$f351$end;
    ir_make_label cb$Nstd$Nrawstring$Nequals$AB$Araw_string$Araw_string$f351$body;
    ir_index A0 L1;
    ir_index A1 L1;
    ir_jmp_eq ST ST cb$Nstd$Nrawstring$Nequals$AB$Araw_string$Araw_string$if348$else;
    ir_make_label cb$Nstd$Nrawstring$Nequals$AB$Araw_string$Araw_string$if348$body;
    ir_return 0;
    ir_make_label cb$Nstd$Nrawstring$Nequals$AB$Araw_string$Araw_string$if348$else;
    ir_add L1 1;
    ir_load L1 ST;
    ir_jmp cb$Nstd$Nrawstring$Nequals$AB$Araw_string$Araw_string$f351$cond;
    ir_make_label cb$Nstd$Nrawstring$Nequals$AB$Araw_string$Araw_string$f351$end;
    ir_return 1;
endf

