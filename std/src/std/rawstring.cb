import std::mem as mem
import std::runtime::memory

func copy(str: &pure uint8) {
    return copy(str, str->strlen())
}

//conditional runtime_included
func copy(str: &pure uint8, size: usize) {
    let m = alloc(size+1)
    let newstr = nullcast(cast(*uint8) m.ptr)
    copy(newstr, str, size)
    newstr[size] = '\0'
    return newstr
}

func copy(dest: &pure uint8, src: &pure uint8, size: usize) {
    mem::copy(cast(rawptr) dest, cast(rawptr) src, size)
}

func set(dest: &pure uint8, value: pure uint8, count: usize) {
    mem::set(cast(rawptr) dest, value, count)
}

func strlen(str: &pure uint8) {
    let c : usize
    let p = str
    while (@p != 0) {
        //let ip = cast[uintptr] p;
        p = p + 1//cast[*char] (ip + 1);
        c = c + 1
    }
    return c
}

func equals(a: &pure uint8, b: &pure uint8) {
    if (a->strlen() != b->strlen()) { return false }

    for (i in 0, a->strlen()) {
        if (a[i] != b[i]) {
            return false
        }
    }

    return true
}