import std::libc::string;
import std::memory as mem;

func copy(str: raw_string): raw_string {
    return copy(str, len(str));
}

func copy(str: raw_string, size: usize): raw_string {
    let newstr = cast[raw_string] mem::alloc(size+1);
    copy(newstr, str, size);
    newstr[size] = 0;
    return newstr;
}

func copy(dest: raw_string, src: raw_string, size: usize) {
    mem::copy(cast[raw_ptr] dest, cast[raw_ptr] src, size);
}

func set(dest: raw_string, value: char, count: usize) {
    mem::set(cast[raw_ptr] dest, value, count);
}

func len(str: raw_string): usize {
    return strlen(str);
}

func equals(a: raw_string, b: raw_string): bool {
    let l = len(a);
    var i = 0;
    while (i < l) {
        if (!(a[i] == b[i])) {
            return false;
        }
        i = i + 1;
    }

    return true;
}

// test stuff

import std::io;
import std::libc::stdio;
import std::libc::stdlib;

func print_the_char(v: char, d: char) {
    puts(&v);
}

func longfunc(a: int, b: int, c: int, d: int, e: int, f: int, g: int, h: int): int {
    return a + b + c + d + e + f + g + h;
}

func test_longfunc() {
    let result = longfunc(1, 2, 3, 4, 5, 6, 7, 8);
    if (result == 36) {
        println("test_longfunc: OK");
    }
    else {
        println("test_longfunc: NOK");
    }
}

func test_strcopy_len() {
    var r : range[int];
    r.start = 3;
    r.end = 4;

    let str = "hello";
    let newstr = str.copy;

    if (len(str) == len(newstr)) {
        println("test_strcopy_len: OK");
    }
    else {
        println("test_strcopy_len: NOK");
    }

    mem::dealloc(cast[raw_ptr] newstr);
}

func test_strcopy() {
    let str = "hello";
    let newstr = copy(str);
    
    if (str[0] == newstr[0] && str[1] == newstr[1] && str[2] == newstr[2] && str[3] == newstr[3] && str[4] == newstr[4]) {
        println("test_strcopy: OK");
    }
    else {
        println("test_strcopy: NOK");
    }

    mem::dealloc(cast[raw_ptr] newstr);
}

func test_strcopy_saving() {
    let str = "hello";
    let newstr = copy(str);

    let c1 = str[0] == newstr[0];
    let c2 = str[1] == newstr[1];
    let c3 = str[2] == newstr[2];
    let c4 = str[3] == newstr[3];
    let c5 = str[4] == newstr[4];

    if (c1 && c2 && c3 && c4 && c5) {
        println("test_strcopy_saving: OK");
    }
    else {
        println("test_strcopy_saving: NOK");
    }
    
    mem::dealloc(cast[raw_ptr] newstr);
}

func test_while_statement() {
    let str = "hello";
    let newstr = copy(str);

    var i = 0;
    while (i < 5) {
        newstr[i] = 'G';
        i = i + 1;
    }

    println(newstr);

    if (i < 5) {
        println("asdasd");
    }

    if (equals(newstr, "GGGGG") && !equals(newstr, "foobar")) {
        println("test_while_statement: OK");
    }
    else {
        println("test_while_statement: NOK");
    }
    
    mem::dealloc(cast[raw_ptr] newstr);
}

func test_short(): bool {
    println("SHOULD NOT PRINT THIS");
    return true;
}

func main(): int {
    let text = "hello world";
    let newtext = copy(text);
    *newtext = 'K';
    newtext[6] = 'G';
    if ((len(newtext) == 11 || test_short()) && (4*9*9) >= 7) {
        println(text);
        println(newtext);
    }

    let ok = len(newtext) > 10 && 3 > 5;
    if (ok) {
        println("it's ok\n\n");
    }

    test_longfunc();
    test_strcopy_len();
    test_strcopy();
    test_strcopy_saving();
    test_while_statement();

    mem::dealloc(cast[raw_ptr] newtext);

    return 0;
}