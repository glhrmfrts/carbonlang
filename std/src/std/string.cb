import std::mem
import std::rawstring

type string = []pure uint8

let MAX_INTEGER_STRING_LEN = 24

func int_to_string(value: int, base: int, result: []uint8) {
    // check that the base if valid
    if (base < 2 || base > 36) { return 0 }

    let tpl_str = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"

    let tmp_value : int
    let offs : int
    while (value != 0) {
        if (offs >= result.len) {
            offs -= 1
            break
        }
        
        tmp_value = value
        value /= base

        result[offs] = tpl_str[35 + (tmp_value - value * base)]
        offs += 1
    }

    let ptr:  &uint8 = &result[offs]
    let ptr1: &uint8 = &result[0]

    // Apply negative sign
    if (tmp_value < 0) {
        @ptr = '-'
        ptr += 1
    }

    @ptr = '\0'
    ptr -= 1

    let tmp_char : uint8
    while (ptr1 < ptr) {
        tmp_char = @ptr

        @ptr = @ptr1
        ptr -= 1

        @ptr1 = tmp_char
        ptr1 += 1
    }

    return offs
}

func to_string(i: int, dest: []uint8) {
    let n = int_to_string(i, 10, dest)
    return string{ dest.data, n }
}

func to_string(c: &pure uint8) {
    return string{ c, c->strlen() }
}

func to_string(buf: []uint8) {
    return string{ buf.data, buf.len }
}

func to_string(b: bool) {
    if (b) {
        return "true"->to_string()
    } else {
        return "false"->to_string()
    }
}