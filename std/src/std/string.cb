import std::alloc

type string = struct {
    auto data: *pure uint8
    len:       usize
    is_lit:    bool
}

/*
func auto_cleanup(s: *string) {
    if (!s.is_lit) {
        free(cast(pointer) s.data)
    }
}

func copy_cstring(cstr: *pure uint8, len: usize) {
    let data = allocn(`uint8, len + 1)
    copy(cast(pointer) data, cast(pointer) cstr, len)
    data[len] = '\0'
    return data
}

func make_string(data: *pure uint8) {
    let len = data.strlen
    let cpy = copy_cstring(data, len)
    return string{cpy, len, false}
}

func make_string(data: *pure uint8, len: usize) {
    let cpy = copy_cstring(data, len)
    return string{cpy, len, false}
}

func concat(a: pure string, b: pure string) {
    let newlen = a.len + b.len
    let data = allocn(`uint8, newlen)
    copy(cast(pointer) data, cast(pointer) a.data, a.len)
    copy(cast(pointer) (data + a.len), cast(pointer) b.data, b.len)
    data[newlen] = '\0'
    let result = string{data, newlen}
    return result
}

func find(str: pure string, sub: pure string) {
    return -1
}

func find(str: pure string, offs: usize, sub: pure string) {
    return -1
}

func find_last(str: pure string, sub: pure string) {
    let last = find(str, sub)
    let cur = last
    while (cur != -1) {
        last = cur
        cur = find(str, cur + 1, sub)
    }
    return last
}
*/

func to_string(value: int, base: int) {
    // check that the base if valid
    if (base < 2 || base > 36) { return "" }

    let tmp_value : int
    let run_yet = false
    let offs = 0

    let result = string{ allocn(`uint8, 25), 24, false }
    result.data[24] = '\0'

    let tpl_str = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"

    while (value || !run_yet) {
        /*if (offs >= 24) {
            //break
        }*/

        tmp_value = value
        value /= base

        result.data[offs] = tpl_str[35 + (tmp_value - value * base)]
        offs += 1

        run_yet = true
    }

    let ptr = result.data
    let ptr1 = result.data

    // Apply negative sign
    if (tmp_value < 0) {
        @ptr = '-'
        ptr += 1
    }

    @ptr = '\0'
    ptr -= 1

    let tmp_char : uint8
    while (ptr1 < ptr) {
        tmp_char = @ptr

        @ptr = @ptr1
        ptr += 1
        ptr1 += 1

        @ptr1 = tmp_char
        ptr1 += 1
    }
    return ""
}

func to_string(i: int) {
    return to_string(i, 10)
}