/*
import std::runtime::windows

type ticks = int64

func get_tick_counter(): ticks {
    let t : int64
    if (QueryPerformanceCounter(t)) {
        return cast(ticks)t
    }
    return 0
}

type duration = struct {
    s: int64
    us: int64
}

let PRECISION_SECONDS = 1
let RATIO_MILLISECONDS = 1000
let RATIO_MICROSECONDS = 1000000

func to_duration(t: ticks): duration {
    let frequency : int64
    
    QueryPerformanceFrequency(frequency)

    let us = t * RATIO_MICROSECONDS / frequency
    
    return duration{us / RATIO_MICROSECONDS, (us % RATIO_MICROSECONDS)}
}

type timestamp = struct {
    sec: int64
    nsec: int64
}

func now(): timestamp {
    return timestamp{}
}*/

func dummy() {}