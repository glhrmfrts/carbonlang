import std::runtime::windows
import std::memory

func alloc(size: usize): memory {
    return memory{HeapAlloc(GetProcessHeap(), 0, size), size}
}

/*
func allocn(`T, n: usize): &T {
    let size = n*sizeof(T)
    let result = alloc(size)
    set(result, 0, size)
    return nullcast(cast(&T) result)
}

func make_slice(`T, n: usize): []T {
    // FIXME: let data = alloc(`T, n)
    let data = allocn(`T, n)
    return []T{ data, n }
}
*/

func free(m: & memory): {} {
    //if (m.ptr == nullptr) { return }

    HeapFree(GetProcessHeap(), 0, m.ptr)
    m.ptr = nullptr
}
