import std::os::windows

func alloc(size: usize): pointer {
    return HeapAlloc(GetProcessHeap(), 0, size)
}

func allocn(`T, n: usize): *T {
    let size = n*sizeof(T)
    let result = alloc(size)
    set(result, 0, size)
    return cast(*T) result
}

func make_slice(`T, n: usize): []T {
    // FIXME: let data = alloc(`T, n)
    let data = allocn(`T, n)
    return []T{ data, n }
}

func free(ptr: pointer) {
    HeapFree(GetProcessHeap(), 0, ptr)
}

/// Copies [size] bytes from [src] to [dest].
func copy(dest: pointer, src: pointer, size: usize) {
    asm%{
push rdi
push rsi

mov rdi,rcx
mov rsi,rdx
mov rcx,r8
rep movsb

pop rsi
pop rdi
    }%asm;
}

/// Stores [count] amount of [value] in [dest].
func set(dest: pointer, value: uint8, count: usize) {
    asm%{
push rdi

mov rdi,rcx
mov rax,rdx
mov rcx,r8
rep stosb

pop rdi
    }%asm;
}