/*

The dumbest allocator possible:

Memory is allocated in blocks with the minimum size being the page size:

| ---------------------------------------- |
|                                          |
| ---------------------------------------- |
^ size                                     ^ cap

"size" grows as memory is being requested by the user

| ---------------------------------------- |
| XXXXXXXXXXXXXXXXXX                       |
| ---------------------------------------- |
                    ^ size                 ^ cap

When user memory from a block is free'd, it will decrease an allocation counter,
if that allocation counter reaches 0, the entire block is released.

*/

import std::system as sys
import std::io

private {

const ALIGNMENT : usize = 16
const PAGE_SIZE : usize = 4096

type memory_block = struct {
    filled: usize
    cap: usize
    num_allocs: usize
    next: &memory_block
}

let last_block : &memory_block

func alloc_in_block(pblock: &memory_block, size: usize): &opaque {
    let blockdata = (cast(&uint8)(cast(&opaque)pblock)) + sizeof(memory_block)
    let ptr = blockdata + pblock.filled
    pblock.filled += size
    pblock.num_allocs += 1

    sys::write(sys::stdout(), "std::mem - Growing block fill to ")
    sys::write_int(sys::stdout(), cast(int)pblock.filled)
    sys::write(sys::stdout(), " bytes\n")

    return ptr
}

func align(size: usize, alignment: usize): usize {
    return size + (-size & (alignment - cast(usize)1))
}

}

func memcopy(dest: &opaque, src: &pure opaque, size: usize) {
asm%{
    mov %rdx,%rcx
    rep movsb
}%asm
}

func memset(dest: &opaque, value: uint8, count: usize) {
asm%{
    mov %rsi,%rax
    mov %rdx,%rcx
    rep stosb
}%asm
}

func alloc(usersize: usize): {&opaque, error} {
    let asize = align(usersize, ALIGNMENT)

    let pblock = last_block
    for (pblock != nil) {
        if (pblock.filled + asize < pblock.cap) {
            break
        }
        pblock = pblock.next
    }

    if (pblock != nil) {
        return alloc_in_block(pblock, asize), noerr
    }

    let memsize = align(sizeof(memory_block) + asize, PAGE_SIZE)
    let newmem, err = sys::alloc(memsize)
    if (err != noerr) {
        return nil, err
    }

    memset(newmem, 0, sizeof(memory_block))

    let newblock = cast(&memory_block)(newmem)
    newblock.cap = memsize
    newblock.next = last_block

    sys::write(sys::stdout(), "std::mem - Allocating block of ")
    sys::write_int(sys::stdout(), cast(int)newblock.cap)
    sys::write(sys::stdout(), " bytes\n")

    last_block = newblock

    return alloc_in_block(newblock, asize), noerr
}

func free(ptr: &opaque) {
    let pblock = last_block
    let prevblock : &memory_block

    for (pblock != nil) {
        let blockdata = (cast(&uint8)(cast(&opaque)pblock)) + sizeof(memory_block)
        if (ptr >= blockdata && ptr < (blockdata + pblock.cap)) {
            break
        }

        prevblock = pblock
        pblock = pblock.next
    }

    if (pblock == nil) {
        // This pointer did not come from here
        return
    }

    pblock.num_allocs -= 1
    if (pblock.num_allocs == 0) {
        if (last_block == pblock) {
            last_block = pblock.next
        }
        else {
            prevblock.next = pblock.next
        }

        sys::write(sys::stdout(), "std::mem - Freeing block of ")
        sys::write_int(sys::stdout(), cast(int)pblock.cap)
        sys::write(sys::stdout(), " bytes\n")

        sys::free(pblock, pblock.cap)
    }
}