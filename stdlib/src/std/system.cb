//CARBONDOC Low-level system provided layer.

error {
    //CARBONDOC A file/directory path does not exist.
    PATH_NOT_FOUND

    //CARBONDOC Invalid file, socket, thread or mutex handle.
    INVALID_HANDLE
}

// memory.cb

extern func alloc(sz: usize): {&opaque, error}

extern func alloc(sz: usize, extra: &opaque): {&opaque, error}

extern func free(m: &opaque)


// io.cb

typealias FileHandle = &opaque

extern func write(fd: FileHandle, data: []pure uint8): isize

extern func read(fd: FileHandle, data: []uint8): isize

type OpenFlags = enumflags {
    CREATE
    WRITE
    READ
    APPEND
}

extern func open(path: []pure uint8, flags: OpenFlags, mode: int): {FileHandle, error}

extern func stdout(): FileHandle

extern func stderr(): FileHandle

extern func stdin(): FileHandle

extern func fdflags(fd: FileHandle): int

extern func close(fd: FileHandle): error

type Whence = enum {
    SeekSet
    SeekCurrent
    SeekEnd
    SeekData
    SeekHole
}

extern func seek(fd: FileHandle, offset: int64, w: Whence)

type Stat = struct {
    size: usize
    mtime: int64
    atime: int64
    ctime: int64
    mode: int
}

extern func stat(filename: []pure uint8, buf: &Stat): error

extern func stat(fd: FileHandle, buf: &Stat): error

extern func unlink(path: []pure uint8): error

extern func remove(path: []pure uint8): error

extern func rename(path: []pure uint8, dest: []pure uint8): error

extern func copy(path: []pure uint8, dest: []pure uint8): error

extern func mkdir(path: []pure uint8): error


// process.cb

extern func exit(code: int)

extern func process(cmdline: []pure uint8, pwd: []pure uint8): error


// thread.cb

typealias ThreadHandle = &opaque

typealias MutexHandle = &opaque

extern func makeThread(fn: {&opaque} -> {}, arg: &opaque): {ThreadHandle, error}

extern func join(th: ThreadHandle): error

extern func threadId(): int

extern func cpuCount(): int

extern func makeMutex(): {MutexHandle, error}

extern func lock(m: MutexHandle): error

extern func unlock(m: MutexHandle): error

extern func destroy(m: MutexHandle)

extern func sleepMs(ms: uint64)