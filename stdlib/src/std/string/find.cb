// License: MPL-2.0
// (c) 2021 Guilherme Nemeth <guilherme.nemeth@gmail.com>

// Returns the index of the first ocurrence of 'needle' in 'haystack'.
// Also returns true if it was found, otherwise returns false.
func find(haystack: string, needle: uint8): {usize, bool} {
    for (i in 0, haystack.len) {
        if (haystack[i] == needle) {
            return cast(usize)i, true
        }
    }
    return cast(usize)0, false
}

// Returns the index of the first ocurrence of 'needle' in 'haystack'.
// Also returns true if it was found, otherwise returns false.
func find(haystack: string, needle: string): {usize, bool} {
    for (i in 0, haystack.len) {
        if (haystack[i] == needle[0] && equals(haystack[i, i+needle.len], needle)) {
            return cast(usize)i, true
        }
    }
    return cast(usize)0, false
}

/*
@test func test_find() {
    assert(find("Hello world", "world") == {6z, true})
    assert(find("Hello world", "Hello") == {0, true})
    assert(!find("Hello world", "Nope").second)
    assert(!find("Hello world", "worldsuffix").second)
}
*/