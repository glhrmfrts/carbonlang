import std::system
import std::linux::syscall as syscall

extern(carbon, std::system) {

func stdin(): file_handle {
    return cast(file_handle)(cast(uintptr)0)
}

func stdout(): file_handle {
    return cast(file_handle)(cast(uintptr)1)
}

func stderr(): file_handle {
    return cast(file_handle)(cast(uintptr)2)
}

func read(fd: file_handle, data: []uint8) {
    syscall::read(cast(uint)(cast(uintptr)fd), data.ptr, data.len)
}

func write(fd: file_handle, data: []pure uint8) {
    syscall::write(cast(uint)(cast(uintptr)fd), data.ptr, data.len)
}

func close(fd: file_handle) : error {
    syscall::close(cast(uint)(cast(uintptr)fd))
    return noerr
}

}