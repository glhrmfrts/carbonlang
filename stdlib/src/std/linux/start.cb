import std::system
import std::mem as mem
import std::linux::syscall
import aoc

func testAlloc() {
    let m, err = mem::alloc(16)
    if (err!=noerr) {
        write(stdout(), "ALLOC_FAILED\n")
        return
    }
    write(stdout(), "testAlloc: OK\n")
    mem::free(m)
}

const N = 10

func testMain(argc: int) {
    let invalidMapValue = cast(&opaque)(cast(uintptr)-1)

    let ptr, err = mem::alloc(N*sizeof(int))
    if (err != noerr) {
        exit(1)
    }

    writeInt(stdout(), 1412312)
    write(stdout(), "\n")
    writeInt(stdout(), cast(int)(cast(uintptr)ptr))
    write(stdout(), "\n")

    let arr = []int{ cast(&int) ptr, N }
    arr[0] = 0
    arr[1] = 1

    // Calculate fibbonaci numbers
    for (i in 2,N) {
        arr[i] = arr[i - 1] + arr[i - 2]
    }

    for (i in 0,N) {
        writeInt(stdout(), arr[i])
        write(stdout(), ",")
    }
    write(stdout(), "\n")
    
    testAlloc()

    mem::free(ptr)

    write(stdout(), "I'm going to segfault, ok?\n")

    // Try to read from unmapped memory
    let val = arr[0]

    exit(argc)
}

func testBoolOp() {
    let count = 0
    let value = count > 0
    return false
}

extern(C) func __carbon_main(argc: int, argv: & &pure uint8) {
    //let buf : [1]uint8
    //let c = []uint8{ &buf[0], sizeof(buf) }
    //read(stdin(), c)
    write(stdout(), "Running aoc01:\n")
    let res01 = aoc01()
    if (res01 == 1832) {
        println("AOC01: OK")
    }

    exit(0)

    // testMain(argc)
}