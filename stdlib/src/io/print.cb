import system as sys

func print(c: uint8) {
    let buf : [2]uint8
    buf[0] = '.'
    buf[1] = 0

    let s = []pure uint8{ &buf, 1 }
    sys::write(sys::stdout(), s)
}

func print(s: []pure uint8) {
    sys::write(sys::stdout(), s)
}

func print(i: int) {
    sys::write_int(sys::stdout(), i)
}

func print(i: usize) {
    print(cast(int)i)
}

func print(b: bool) {
    if (b) {
        print("true")
    }
    else {
        print("false")
    }
}

func print(v: nil) {
    print("nil")
}

func print(err: error) {
    print(sys::error_string(err))
}

func println(s: []pure uint8) {
    sys::write(sys::stdout(), s)
    sys::write(sys::stdout(), "\n")
}

func println(i: int) {
    sys::write_int(sys::stdout(), i)
    sys::write(sys::stdout(), "\n")
}

func println(i: usize) {
    println(cast(int)i)
}

func println(p: &opaque) {
    println(cast(int) cast(uintptr) p)
}

func println(b: bool) {
    print(b)
    println("")
}

func println(v: nil) {
    print(v)
    println("")
}

func println(e: error) {
    print(e)
    println("")
}

func print_tuple_helper(t) {
    let a, rest... = t
    //let cpy = t
    //print(cpy.first)
    print(a)
    print(",")
    if (rest.len > 1) {
        print_tuple_helper(rest)
    }
    else {
        print(rest.first)
    }
}

func print_tuple(t) {
    print("{")
    if (t.len > 1) {
        print_tuple_helper(t)
    }
    else {
        print(t.first)
    }
    print("}")
}

func println_tuple(t) {
    print_tuple(t)
    println("")
}