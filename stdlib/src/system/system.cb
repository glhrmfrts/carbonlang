// Low-level system provided layer.

error {
    ALLOC_FAILED

    PATH_NOT_FOUND

    INVALID_HANDLE

    UNKNOWN_ERROR
}

// Returns the string representation of any error
extern func error_string(err: error): []pure uint8

// memory.cb

extern func alloc(sz: usize): {&opaque, error}

extern func alloc(sz: usize, extra: &opaque): {&opaque, error}

extern func free(m: &opaque, sz: usize)


// io.cb

typealias File_Handle = &opaque

extern func write(fd: File_Handle, data: []pure uint8): isize

extern func read(fd: File_Handle, data: []uint8): isize

type Open_Flags = enumflags { WRITE READ APPEND TRUNCATE CREATE }

extern func open(path: []pure uint8, flags: Open_Flags, mode: int): {File_Handle, error}

extern func stdout(): File_Handle

extern func stderr(): File_Handle

extern func stdin(): File_Handle

extern func fdflags(fd: File_Handle): int

extern func close(fd: File_Handle): error

type Whence = enum {
    SEEK_SET
    SEEK_CURRENT
    SEEK_END
}

extern func seek(fd: File_Handle, offset: int64, w: Whence)

type Stat = struct {
    size: usize
    mtime: int64
    atime: int64
    ctime: int64
    mode: int
}

extern func stat(filename: []pure uint8, buf: &Stat): error

extern func stat(fd: File_Handle, buf: &Stat): error

extern func unlink(path: []pure uint8): error

extern func remove(path: []pure uint8): error

extern func rename(path: []pure uint8, dest: []pure uint8): error

extern func copy(path: []pure uint8, dest: []pure uint8): error

extern func mkdir(path: []pure uint8): error

extern func chdir(path: []pure uint8): error


// process.cb

extern func exit(code: int)

extern func process(path: []pure uint8, args: [][]pure uint8): {int, error}


// thread.cb

typealias thread_handle = &opaque

typealias mutex_handle = &opaque

extern func make_thread(fn: {&opaque} -> {}, arg: &opaque): {thread_handle, error}

extern func join(th: thread_handle): error

extern func thread_id(): int

extern func cpu_count(): int

extern func make_mutex(): {mutex_handle, error}

extern func lock(m: mutex_handle): error

extern func unlock(m: mutex_handle): error

extern func destroy(m: mutex_handle)

extern func sleep_ms(ms: uint64)

// temporary

func intToString(value: int, base: int, dest: []uint8) {
    // check that the base if valid
    if (base < 2 || base > 36) { return 0 }

    let result = dest

    let tpl_str = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"

    let tmp_value = value
    let offs : int
    let nvalue = -1

    for (nvalue != 0) {
        if (offs >= result.len) {
            offs -= 1
            break
        }
        
        tmp_value = value
        value /= base
        nvalue = value

        result[offs] = tpl_str[35 + (tmp_value - value * base)]
        offs += 1
    }

    let ptr:  &uint8 = &result.ptr[offs]
    let ptr1: &uint8 = &result.ptr[0]

    // Apply negative sign
    if (tmp_value < 0) {
        @ptr = '-'
        ptr += 1
        offs += 1
    }

    @ptr = '\0'
    ptr -= 1

    let tmp_char : uint8
    for (ptr1 < ptr) {
        tmp_char = @ptr

        @ptr = @ptr1
        ptr -= 1

        @ptr1 = tmp_char
        ptr1 += 1
    }

    return offs
}

func write_int(fd: File_Handle, value: int) {
    let buf : [32]uint8
    let dest = []uint8{&buf[0], sizeof(buf)}
    dest.len = intToString(value, 10, dest)
    write(fd, dest)
}