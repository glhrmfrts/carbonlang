import system

type ArenaBlock = struct {
    mem: &opaque
    filled: usize
    prev: &ArenaBlock
}

type Arena = struct {
    //allocator: I_allocator
    firstBlock: &ArenaBlock
    alignment:  usize
    blockSize:  usize
}

/*
func align(number: usize, alignment: usize) {
    // #TODO implement
    return number
}

func fits_in_block(b: &ArenaBlock, size: usize) {
    return b.filled + size <= b.mem.len
}

func allocate_in_block(b: &ArenaBlock, size: usize) {
    let result = b.mem.ptr + b.filled
    b.filled += size
    return memory{cast(rawptr) result, size}
}

func i_alloc(self: &I_allocator, sz: usize): memory {
    let rawself = cast(rawptr)self
    //return alloc(nullcast(cast(*Arena)rawself), sz)
    let m = alloc(nullcast(cast(*Arena)rawself), sz)
    return m
}

func i_free(self: &I_allocator, m: &memory) {
}

func make_Arena_allocator(block_size: usize): Arena {
    let a : Arena
    a.alignment = sizeof(rawptr)
    a.block_size = align(block_size, a.alignment)
    a.first_block = nullptr
    //a.allocator.alloc = i_alloc
    //a.allocator.free = i_free
    return a
}

func free(a: &Arena): {} {
    let pblock = a.first_block
    while (pblock != nullptr) {
        let block = nullcast(pblock)
        let prev = block.prev
        free(block.mem.ptr)
        pblock = prev
    }
}

func alloc(a: &Arena, user_size: usize): memory {
    let size = align(user_size, a.alignment)
    let pblock = a.first_block
    while (pblock != nullptr) {
        let block = nullcast(pblock)
        if (fits_in_block(block, size)) {
            return allocate_in_block(block, size)
        }
        pblock = block.prev
    }

    let new_block_memory = memory{alloc(sizeof(ArenaBlock) + a.block_size), sizeof(ArenaBlock) + a.block_size}
    let new_block = nullcast(cast(*ArenaBlock) new_block_memory.ptr)
    new_block.mem = memory{
        new_block_memory.ptr + sizeof(ArenaBlock),
        new_block_memory.len - sizeof(ArenaBlock)
    }
    new_block.filled = 0
    new_block.prev = a.first_block

    a.first_block = new_block
    return allocate_in_block(new_block, size)
}
*/