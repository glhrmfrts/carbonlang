code_unit{
  std/linux/io.cb
  decl_list{
    import_decl{ std::system}
    import_decl{ std::linux::syscall syscall}
    linkage_specifier{ extern decl_list{
        func_decl{stdin (): type_expr{FileHandle} {
            stmt_list{
              return{cast_expr{type_expr{FileHandle} cast_expr{type_expr{uintptr} 0}}}}}}
        func_decl{stdout (): type_expr{FileHandle} {
            stmt_list{
              return{cast_expr{type_expr{FileHandle} cast_expr{type_expr{uintptr} 1}}}}}}
        func_decl{stderr (): type_expr{FileHandle} {
            stmt_list{
              return{cast_expr{type_expr{FileHandle} cast_expr{type_expr{uintptr} 2}}}}}}
        func_decl{read (var_decl{(fd): type_expr{FileHandle}}, var_decl{(data): }) {
            stmt_list{
              call{syscall::read (cast_expr{type_expr{uint} cast_expr{type_expr{uintptr} fd}}, {@ data}.ptr, {@ data}.len)}}}}
        func_decl{write (var_decl{(fd): type_expr{FileHandle}}, var_decl{(data): }) {
            stmt_list{
              call{syscall::write (cast_expr{type_expr{uint} cast_expr{type_expr{uintptr} fd}}, {@ data}.ptr, {@ data}.len)}}}}
        func_decl{close (var_decl{(fd): type_expr{FileHandle}}): type_expr{$error} {
            stmt_list{
              call{syscall::close (cast_expr{type_expr{uint} cast_expr{type_expr{uintptr} fd}})}}
            stmt_list{
              return{0}}}}}}}}
