code_unit ./src/std/linux/syscall/syscall.cb
  decl_list
    var_decl{(identifier MAP_SHARED) = int_literal 1}
    var_decl{(identifier MAP_PRIVATE) = int_literal 2}
    var_decl{(identifier MAP_SHARED_VALIDATE) = int_literal 3}
    var_decl{(identifier MAP_TYPE) = int_literal 15}
    var_decl{(identifier MAP_FIXED) = int_literal 16}
    var_decl{(identifier MAP_ANON) = int_literal 32}
    var_decl{(identifier MAP_ANONYMOUS) = identifier MAP_ANON}
    var_decl{(identifier PROT_NONE) = int_literal 0}
    var_decl{(identifier PROT_READ) = int_literal 1}
    var_decl{(identifier PROT_WRITE) = int_literal 2}
    var_decl{(identifier PROT_EXEC) = int_literal 4}
    var_decl{(identifier PROT_GROWSDOWN) = int_literal 16777216}
    var_decl{(identifier PROT_GROWSUP) = int_literal 33554432}
    func_decl{identifier read (var_decl{(identifier fd): type_expr{identifier uint}}, var_decl{(identifier ptr): type_expr{type_qualifier{ptr, identifier uint8}}}, var_decl{(identifier len): type_expr{identifier usize}}) compound_stmt
        decl_list
          asm{
    mov $0, %rax            # system call 0 is read
                            # file handle is already in rdi
                            # data is already in rsi
                            # number of bytes is already in rdx
    syscall

}
        decl_list end

      compound_stmt end
}
    func_decl{identifier write (var_decl{(identifier fd): type_expr{identifier uint}}, var_decl{(identifier ptr): type_expr{type_qualifier{ptr, type_qualifier{ identifier uint8}}}}, var_decl{(identifier len): type_expr{identifier usize}}) compound_stmt
        decl_list
          asm{
    mov $1, %rax            # system call 1 is write
                            # file handle is already in rdi
                            # data is already in rsi
                            # number of bytes is already in rdx
    syscall

}
        decl_list end

      compound_stmt end
}
    func_decl{identifier open (var_decl{(identifier filename): type_expr{type_qualifier{ptr, type_qualifier{ identifier uint8}}}}, var_decl{(identifier flags): type_expr{identifier int}}, var_decl{(identifier mode): type_expr{identifier int16}}): type_expr{identifier int} compound_stmt
        decl_list
          asm{    mov $2, %rax
    syscall
}
        decl_list end

      compound_stmt end
}
    func_decl{identifier close (var_decl{(identifier fd): type_expr{identifier uint}}) compound_stmt
        decl_list
          asm{    mov $3, %rax
    syscall
}
        decl_list end

      compound_stmt end
}
    func_decl{identifier stat (var_decl{(identifier filename): type_expr{type_qualifier{ptr, type_qualifier{ identifier uint8}}}}, var_decl{(identifier buf): type_expr{type_qualifier{ptr, identifier opaque}}}): type_expr{identifier int} compound_stmt
        decl_list
          asm{    mov $4, %rax
    syscall
}
        decl_list end

      compound_stmt end
}
    func_decl{identifier fstat (var_decl{(identifier fd): type_expr{identifier int}}, var_decl{(identifier buf): type_expr{type_qualifier{ptr, identifier opaque}}}): type_expr{identifier int} compound_stmt
        decl_list
          asm{    mov $5, %rax
    syscall
}
        decl_list end

      compound_stmt end
}
    func_decl{identifier mmap (var_decl{(identifier addr): type_expr{type_qualifier{ptr, identifier opaque}}}, var_decl{(identifier size): type_expr{identifier usize}}, var_decl{(identifier prot): type_expr{identifier int}}, var_decl{(identifier flags): type_expr{identifier int}}, var_decl{(identifier fd): type_expr{identifier int}}, var_decl{(identifier offs): type_expr{identifier usize}}): type_expr{type_qualifier{ptr, identifier opaque}} compound_stmt
        decl_list
          asm{    mov $9, %rax
    mov %rcx, %r10
    syscall
}
        decl_list end

      compound_stmt end
}
    func_decl{identifier munmap (var_decl{(identifier addr): type_expr{type_qualifier{ptr, identifier opaque}}}, var_decl{(identifier size): type_expr{identifier usize}}) compound_stmt
        decl_list
          asm{    mov $0xB, %rax
    syscall
}
        decl_list end

      compound_stmt end
}
    func_decl{identifier rename (var_decl{(identifier oldname): type_expr{type_qualifier{ptr, type_qualifier{ identifier uint8}}}}, var_decl{(identifier newname): type_expr{type_qualifier{ptr, type_qualifier{ identifier uint8}}}}) compound_stmt
        decl_list
          asm{    mov $0x52, %rax
    syscall
}
        decl_list end

      compound_stmt end
}
    func_decl{identifier mkdir (var_decl{(identifier pathname): type_expr{type_qualifier{ptr, type_qualifier{ identifier uint8}}}}, var_decl{(identifier mode): type_expr{identifier int16}}) compound_stmt
        decl_list
          asm{    mov $0x53, %rax
    syscall
}
        decl_list end

      compound_stmt end
}
    func_decl{identifier rmdir (var_decl{(identifier pathname): type_expr{type_qualifier{ptr, type_qualifier{ identifier uint8}}}}) compound_stmt
        decl_list
          asm{    mov $0x54, %rax
    syscall
}
        decl_list end

      compound_stmt end
}
    func_decl{identifier unlink (var_decl{(identifier pathname): type_expr{type_qualifier{ptr, type_qualifier{ identifier uint8}}}}) compound_stmt
        decl_list
          asm{    mov $0x57, %rax
    syscall
}
        decl_list end

      compound_stmt end
}
    func_decl{identifier exit (var_decl{(identifier code): type_expr{identifier int}}) compound_stmt
        decl_list
          asm{    mov $60, %rax           # system call 60 is exit
                            # code is already in rdi
    syscall
}
        decl_list end

      compound_stmt end
}
  decl_list end

code_unit ./src/std/linux/syscall/syscall.cb end

